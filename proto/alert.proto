// proto/alert.proto
syntax = "proto3";

package notificator.alert;

option go_package = "notificator/internal/backend/proto/alert";

import "google/protobuf/timestamp.proto";

// Alert Service for comments and acknowledgments
service AlertService {
  // Comments
  rpc AddComment(AddCommentRequest) returns (AddCommentResponse);
  rpc GetComments(GetCommentsRequest) returns (GetCommentsResponse);
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse);
  
  // Acknowledgments
  rpc AddAcknowledgment(AddAcknowledgmentRequest) returns (AddAcknowledgmentResponse);
  rpc GetAcknowledgments(GetAcknowledgmentsRequest) returns (GetAcknowledgmentsResponse);
  rpc GetAllAcknowledgedAlerts(GetAllAcknowledgedAlertsRequest) returns (GetAllAcknowledgedAlertsResponse);
  rpc DeleteAcknowledgment(DeleteAcknowledgmentRequest) returns (DeleteAcknowledgmentResponse);
  
  // Real-time Updates
  rpc SubscribeToAlertUpdates(SubscribeToAlertUpdatesRequest) returns (stream AlertUpdate);
  
  // Resolved Alerts
  rpc CreateResolvedAlert(CreateResolvedAlertRequest) returns (CreateResolvedAlertResponse);
  rpc GetResolvedAlerts(GetResolvedAlertsRequest) returns (GetResolvedAlertsResponse);
  rpc GetResolvedAlert(GetResolvedAlertRequest) returns (GetResolvedAlertResponse);
  rpc RemoveAllResolvedAlerts(RemoveAllResolvedAlertsRequest) returns (RemoveAllResolvedAlertsResponse);
  rpc StreamResolvedAlertUpdates(StreamResolvedAlertUpdatesRequest) returns (stream ResolvedAlertUpdate);
  
  // User Color Preferences
  rpc GetUserColorPreferences(GetUserColorPreferencesRequest) returns (GetUserColorPreferencesResponse);
  rpc SaveUserColorPreferences(SaveUserColorPreferencesRequest) returns (SaveUserColorPreferencesResponse);
  rpc DeleteUserColorPreference(DeleteUserColorPreferenceRequest) returns (DeleteUserColorPreferenceResponse);
  
  // User Notification Preferences
  rpc GetUserNotificationPreferences(GetUserNotificationPreferencesRequest) returns (GetUserNotificationPreferencesResponse);
  rpc SaveUserNotificationPreferences(SaveUserNotificationPreferencesRequest) returns (SaveUserNotificationPreferencesResponse);
}

// Comment Messages
message AddCommentRequest {
  string session_id = 1;
  string alert_key = 2;
  string content = 3;
}

message AddCommentResponse {
  bool success = 1;
  Comment comment = 2;
  string message = 3;
}

message GetCommentsRequest {
  string alert_key = 1;
}

message GetCommentsResponse {
  repeated Comment comments = 1;
  int32 count = 2;
}

message DeleteCommentRequest {
  string session_id = 1;
  string comment_id = 2;
}

message DeleteCommentResponse {
  bool success = 1;
  string message = 2;
}

message Comment {
  string id = 1;
  string alert_key = 2;
  string user_id = 3;
  string username = 4;
  string content = 5;
  google.protobuf.Timestamp created_at = 6;
}

// Acknowledgment Messages
message AddAcknowledgmentRequest {
  string session_id = 1;
  string alert_key = 2;
  string reason = 3;
}

message AddAcknowledgmentResponse {
  bool success = 1;
  Acknowledgment acknowledgment = 2;
  string message = 3;
}

message GetAcknowledgmentsRequest {
  string alert_key = 1;
}

message GetAcknowledgmentsResponse {
  repeated Acknowledgment acknowledgments = 1;
  int32 count = 2;
}

message GetAllAcknowledgedAlertsRequest {
  // No parameters needed - returns all acknowledged alerts
}

message GetAllAcknowledgedAlertsResponse {
  map<string, Acknowledgment> acknowledged_alerts = 1; // alert_key -> latest acknowledgment
  int32 count = 2;
}

message DeleteAcknowledgmentRequest {
  string session_id = 1;
  string alert_key = 2;
}

message DeleteAcknowledgmentResponse {
  bool success = 1;
  string message = 2;
}

message Acknowledgment {
  string id = 1;
  string alert_key = 2;
  string user_id = 3;
  string username = 4;
  string reason = 5;
  google.protobuf.Timestamp created_at = 6;
}

// Real-time Updates Messages
message SubscribeToAlertUpdatesRequest {
  string session_id = 1;
  string alert_key = 2;
}

message AlertUpdate {
  string alert_key = 1;
  UpdateType update_type = 2;
  oneof update_data {
    Comment comment = 3;
    Acknowledgment acknowledgment = 4;
    string deleted_comment_id = 5;
    string deleted_acknowledgment_id = 6;
  }
  google.protobuf.Timestamp timestamp = 7;
}

enum UpdateType {
  UNKNOWN_UPDATE = 0;
  COMMENT_ADDED = 1;
  COMMENT_DELETED = 2;
  ACKNOWLEDGMENT_ADDED = 3;
  ACKNOWLEDGMENT_DELETED = 4;
}

// User Color Preferences Messages
message GetUserColorPreferencesRequest {
  string session_id = 1;
}

message GetUserColorPreferencesResponse {
  repeated UserColorPreference preferences = 1;
  bool success = 2;
  string message = 3;
}

message SaveUserColorPreferencesRequest {
  string session_id = 1;
  repeated UserColorPreference preferences = 2;
}

message SaveUserColorPreferencesResponse {
  bool success = 1;
  string message = 2;
}

message DeleteUserColorPreferenceRequest {
  string session_id = 1;
  string preference_id = 2;
}

message DeleteUserColorPreferenceResponse {
  bool success = 1;
  string message = 2;
}

message UserColorPreference {
  string id = 1;                                    // Unique ID for the preference
  string user_id = 2;                              // User who owns this preference
  map<string, string> label_conditions = 3;       // Key-value pairs: {Team: "team-infrastructure", Severity: "Warning"}
  string color = 4;                                // Color value (e.g., "GRAY", "#FF5733", "red-500")
  string color_type = 5;                           // Type: "severity", "custom", "tailwind"
  int32 priority = 6;                              // Higher numbers = higher priority (for conflicts)
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  float bg_lightness_factor = 9;                   // Background lightness adjustment factor
  float text_darkness_factor = 10;                 // Text darkness adjustment factor
}

// Resolved Alert Messages
message CreateResolvedAlertRequest {
  string fingerprint = 1;
  string source = 2;
  bytes alert_data = 3;        // JSON serialized DashboardAlert
  bytes comments = 4;          // JSON serialized comments array
  bytes acknowledgments = 5;   // JSON serialized acknowledgments array
  int32 ttl_hours = 6;         // TTL in hours (default 24)
}

message CreateResolvedAlertResponse {
  bool success = 1;
  ResolvedAlertInfo resolved_alert = 2;
  string message = 3;
}

message GetResolvedAlertsRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message GetResolvedAlertsResponse {
  repeated ResolvedAlertInfo resolved_alerts = 1;
  int32 total_count = 2;
  bool success = 3;
  string message = 4;
}

message GetResolvedAlertRequest {
  string fingerprint = 1;
}

message GetResolvedAlertResponse {
  bool success = 1;
  ResolvedAlertInfo resolved_alert = 2;
  string message = 3;
}

message RemoveAllResolvedAlertsRequest {
  // No parameters needed - removes all resolved alerts
}

message RemoveAllResolvedAlertsResponse {
  bool success = 1;
  int32 removed_count = 2;
  string message = 3;
}

message StreamResolvedAlertUpdatesRequest {
  string session_id = 1;
}

message ResolvedAlertUpdate {
  string fingerprint = 1;
  ResolvedAlertUpdateType update_type = 2;
  ResolvedAlertInfo resolved_alert = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message ResolvedAlertInfo {
  string id = 1;
  string fingerprint = 2;
  bytes alert_data = 3;        // JSON serialized DashboardAlert
  bytes comments = 4;          // JSON serialized comments array
  bytes acknowledgments = 5;   // JSON serialized acknowledgments array
  google.protobuf.Timestamp resolved_at = 6;
  google.protobuf.Timestamp expires_at = 7;
  string source = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

// User Notification Preferences Messages
message GetUserNotificationPreferencesRequest {
  string session_id = 1;
}

message GetUserNotificationPreferencesResponse {
  UserNotificationPreference preference = 1;
  bool success = 2;
  string message = 3;
}

message SaveUserNotificationPreferencesRequest {
  string session_id = 1;
  UserNotificationPreference preference = 2;
}

message SaveUserNotificationPreferencesResponse {
  bool success = 1;
  string message = 2;
}

message UserNotificationPreference {
  string id = 1;                                                  // Unique ID for the preference
  string user_id = 2;                                             // User who owns this preference
  bool enabled = 3;                                               // Notifications enabled
  bool sound_enabled = 4;                                         // Sound notifications enabled
  bool browser_notifications = 5;                                 // Browser notifications enabled
  int32 cooldown_seconds = 6;                                     // Cooldown between notifications (seconds)
  int32 max_notifications = 7;                                    // Maximum simultaneous notifications
  bool respect_filters = 8;                                       // Respect UI filters when determining notifications
  map<string, bool> severity_rules = 9;                          // Map of severity -> enabled
  SoundConfig sound_config = 10;                                  // Sound configuration (legacy static fields)
  string sound_config_json = 11;                                  // Full dynamic sound configuration as JSON
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
}

message SoundConfig {
  int32 critical_frequency = 1;                                   // Critical alert sound frequency
  int32 critical_duration = 2;                                    // Critical alert sound duration (ms)
  string critical_type = 3;                                       // Critical alert sound type (sine, square, etc.)
  int32 warning_frequency = 4;                                    // Warning alert sound frequency
  int32 warning_duration = 5;                                     // Warning alert sound duration (ms)
  string warning_type = 6;                                        // Warning alert sound type
  int32 info_frequency = 7;                                       // Info alert sound frequency
  int32 info_duration = 8;                                        // Info alert sound duration (ms)
  string info_type = 9;                                           // Info alert sound type
}

enum ResolvedAlertUpdateType {
  UNKNOWN_RESOLVED_UPDATE = 0;
  RESOLVED_ALERT_CREATED = 1;
  RESOLVED_ALERT_EXPIRED = 2;
}