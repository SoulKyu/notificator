// proto/alert.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/alert.proto

package alert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlertService_AddComment_FullMethodName              = "/notificator.alert.AlertService/AddComment"
	AlertService_GetComments_FullMethodName             = "/notificator.alert.AlertService/GetComments"
	AlertService_DeleteComment_FullMethodName           = "/notificator.alert.AlertService/DeleteComment"
	AlertService_AddAcknowledgment_FullMethodName       = "/notificator.alert.AlertService/AddAcknowledgment"
	AlertService_GetAcknowledgments_FullMethodName      = "/notificator.alert.AlertService/GetAcknowledgments"
	AlertService_DeleteAcknowledgment_FullMethodName    = "/notificator.alert.AlertService/DeleteAcknowledgment"
	AlertService_SubscribeToAlertUpdates_FullMethodName = "/notificator.alert.AlertService/SubscribeToAlertUpdates"
)

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Alert Service for comments and acknowledgments
type AlertServiceClient interface {
	// Comments
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	// Acknowledgments
	AddAcknowledgment(ctx context.Context, in *AddAcknowledgmentRequest, opts ...grpc.CallOption) (*AddAcknowledgmentResponse, error)
	GetAcknowledgments(ctx context.Context, in *GetAcknowledgmentsRequest, opts ...grpc.CallOption) (*GetAcknowledgmentsResponse, error)
	DeleteAcknowledgment(ctx context.Context, in *DeleteAcknowledgmentRequest, opts ...grpc.CallOption) (*DeleteAcknowledgmentResponse, error)
	// Real-time Updates
	SubscribeToAlertUpdates(ctx context.Context, in *SubscribeToAlertUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AlertUpdate], error)
}

type alertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, AlertService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, AlertService_GetComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, AlertService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) AddAcknowledgment(ctx context.Context, in *AddAcknowledgmentRequest, opts ...grpc.CallOption) (*AddAcknowledgmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAcknowledgmentResponse)
	err := c.cc.Invoke(ctx, AlertService_AddAcknowledgment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAcknowledgments(ctx context.Context, in *GetAcknowledgmentsRequest, opts ...grpc.CallOption) (*GetAcknowledgmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAcknowledgmentsResponse)
	err := c.cc.Invoke(ctx, AlertService_GetAcknowledgments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteAcknowledgment(ctx context.Context, in *DeleteAcknowledgmentRequest, opts ...grpc.CallOption) (*DeleteAcknowledgmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAcknowledgmentResponse)
	err := c.cc.Invoke(ctx, AlertService_DeleteAcknowledgment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) SubscribeToAlertUpdates(ctx context.Context, in *SubscribeToAlertUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AlertUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AlertService_ServiceDesc.Streams[0], AlertService_SubscribeToAlertUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToAlertUpdatesRequest, AlertUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlertService_SubscribeToAlertUpdatesClient = grpc.ServerStreamingClient[AlertUpdate]

// AlertServiceServer is the server API for AlertService service.
// All implementations must embed UnimplementedAlertServiceServer
// for forward compatibility.
//
// Alert Service for comments and acknowledgments
type AlertServiceServer interface {
	// Comments
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	// Acknowledgments
	AddAcknowledgment(context.Context, *AddAcknowledgmentRequest) (*AddAcknowledgmentResponse, error)
	GetAcknowledgments(context.Context, *GetAcknowledgmentsRequest) (*GetAcknowledgmentsResponse, error)
	DeleteAcknowledgment(context.Context, *DeleteAcknowledgmentRequest) (*DeleteAcknowledgmentResponse, error)
	// Real-time Updates
	SubscribeToAlertUpdates(*SubscribeToAlertUpdatesRequest, grpc.ServerStreamingServer[AlertUpdate]) error
	mustEmbedUnimplementedAlertServiceServer()
}

// UnimplementedAlertServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlertServiceServer struct{}

func (UnimplementedAlertServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedAlertServiceServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedAlertServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedAlertServiceServer) AddAcknowledgment(context.Context, *AddAcknowledgmentRequest) (*AddAcknowledgmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAcknowledgment not implemented")
}
func (UnimplementedAlertServiceServer) GetAcknowledgments(context.Context, *GetAcknowledgmentsRequest) (*GetAcknowledgmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcknowledgments not implemented")
}
func (UnimplementedAlertServiceServer) DeleteAcknowledgment(context.Context, *DeleteAcknowledgmentRequest) (*DeleteAcknowledgmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcknowledgment not implemented")
}
func (UnimplementedAlertServiceServer) SubscribeToAlertUpdates(*SubscribeToAlertUpdatesRequest, grpc.ServerStreamingServer[AlertUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToAlertUpdates not implemented")
}
func (UnimplementedAlertServiceServer) mustEmbedUnimplementedAlertServiceServer() {}
func (UnimplementedAlertServiceServer) testEmbeddedByValue()                      {}

// UnsafeAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServiceServer will
// result in compilation errors.
type UnsafeAlertServiceServer interface {
	mustEmbedUnimplementedAlertServiceServer()
}

func RegisterAlertServiceServer(s grpc.ServiceRegistrar, srv AlertServiceServer) {
	// If the following call pancis, it indicates UnimplementedAlertServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlertService_ServiceDesc, srv)
}

func _AlertService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_AddAcknowledgment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAcknowledgmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).AddAcknowledgment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_AddAcknowledgment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).AddAcknowledgment(ctx, req.(*AddAcknowledgmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetAcknowledgments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcknowledgmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAcknowledgments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_GetAcknowledgments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAcknowledgments(ctx, req.(*GetAcknowledgmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_DeleteAcknowledgment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAcknowledgmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).DeleteAcknowledgment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_DeleteAcknowledgment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).DeleteAcknowledgment(ctx, req.(*DeleteAcknowledgmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_SubscribeToAlertUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToAlertUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertServiceServer).SubscribeToAlertUpdates(m, &grpc.GenericServerStream[SubscribeToAlertUpdatesRequest, AlertUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlertService_SubscribeToAlertUpdatesServer = grpc.ServerStreamingServer[AlertUpdate]

// AlertService_ServiceDesc is the grpc.ServiceDesc for AlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificator.alert.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComment",
			Handler:    _AlertService_AddComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _AlertService_GetComments_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _AlertService_DeleteComment_Handler,
		},
		{
			MethodName: "AddAcknowledgment",
			Handler:    _AlertService_AddAcknowledgment_Handler,
		},
		{
			MethodName: "GetAcknowledgments",
			Handler:    _AlertService_GetAcknowledgments_Handler,
		},
		{
			MethodName: "DeleteAcknowledgment",
			Handler:    _AlertService_DeleteAcknowledgment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToAlertUpdates",
			Handler:       _AlertService_SubscribeToAlertUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/alert.proto",
}
