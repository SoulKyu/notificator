// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DashboardUtilities() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\twindow.dashboardUtilitiesMixin = {\n\t\t\tupdateURL() {\n\t\t\t\tconst params = new URLSearchParams();\n\t\t\t\t\n\t\t\t\tif (this.searchQuery) params.set('search', this.searchQuery);\n\t\t\t\tif (this.filters.alertmanagers.length > 0) params.set('alertmanagers', this.filters.alertmanagers.join(','));\n\t\t\t\tif (this.filters.severities.length > 0) params.set('severities', this.filters.severities.join(','));\n\t\t\t\tif (this.filters.statuses.length > 0) params.set('statuses', this.filters.statuses.join(','));\n\t\t\t\tif (this.filters.teams.length > 0) params.set('teams', this.filters.teams.join(','));\n\t\t\t\tif (this.displayMode !== 'classic') params.set('displayMode', this.displayMode);\n\t\t\t\tif (this.viewMode !== 'list') params.set('viewMode', this.viewMode);\n\t\t\t\tif (this.sortField !== 'duration') params.set('sortField', this.sortField);\n\t\t\t\tif (this.sortDirection !== 'asc') params.set('sortDirection', this.sortDirection);\n\t\t\t\tif (this.acknowledgmentFilter) params.set('acknowledged', this.acknowledgmentFilter);\n\t\t\t\tif (this.commentsFilter) params.set('hasComments', this.commentsFilter);\n\t\t\t\t\n\t\t\t\tconst queryString = params.toString();\n\t\t\t\tconst newURL = queryString ? `${window.location.pathname}?${queryString}` : window.location.pathname;\n\t\t\t\t\n\t\t\t\tif (window.location.href !== window.location.origin + newURL) {\n\t\t\t\t\twindow.history.replaceState({}, '', newURL);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tloadFiltersFromURL() {\n\t\t\t\tconst params = new URLSearchParams(window.location.search);\n\t\t\t\t\n\t\t\t\tthis.searchQuery = params.get('search') || '';\n\t\t\t\tthis.filters.alertmanagers = params.get('alertmanagers') ? params.get('alertmanagers').split(',') : [];\n\t\t\t\tthis.filters.severities = params.get('severities') ? params.get('severities').split(',') : [];\n\t\t\t\tthis.filters.statuses = params.get('statuses') ? params.get('statuses').split(',') : [];\n\t\t\t\tthis.filters.teams = params.get('teams') ? params.get('teams').split(',') : [];\n\t\t\t\tthis.displayMode = params.get('displayMode') || 'classic';\n\t\t\t\tthis.viewMode = params.get('viewMode') || 'list';\n\t\t\t\tthis.sortField = params.get('sortField') || 'duration';\n\t\t\t\tthis.sortDirection = params.get('sortDirection') || 'asc';\n\t\t\t\tthis.acknowledgmentFilter = params.get('acknowledged') || null;\n\t\t\t\tthis.commentsFilter = params.get('hasComments') || null;\n\t\t\t},\n\n\t\t\tcheckAlertFromURL() {\n\t\t\t\t// Check if URL contains an alert ID and open modal\n\t\t\t\tconst pathParts = window.location.pathname.split('/');\n\t\t\t\tif (pathParts.length >= 4 && pathParts[1] === 'dashboard' && pathParts[2] === 'alert') {\n\t\t\t\t\tconst alertId = pathParts[3];\n\t\t\t\t\tif (alertId) {\n\t\t\t\t\t\t// Wait a bit for initial data to load, then show alert details\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.showAlertDetails(alertId);\n\t\t\t\t\t\t}, 500);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcopyToClipboard(text) {\n\t\t\t\tif (navigator.clipboard) {\n\t\t\t\t\tnavigator.clipboard.writeText(text).then(() => {\n\t\t\t\t\t\tthis.showNotification('success', 'Copied to clipboard');\n\t\t\t\t\t}).catch(() => {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to copy to clipboard');\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst textArea = document.createElement('textarea');\n\t\t\t\t\ttextArea.value = text;\n\t\t\t\t\tdocument.body.appendChild(textArea);\n\t\t\t\t\ttextArea.select();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdocument.execCommand('copy');\n\t\t\t\t\t\tthis.showNotification('success', 'Copied to clipboard');\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to copy to clipboard');\n\t\t\t\t\t}\n\t\t\t\t\tdocument.body.removeChild(textArea);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Filtering utilities\n\t\t\tapplyFilters() {\n\t\t\t\t// Debounced filter application happens automatically via data loading\n\t\t\t\tthis.loadDashboardData();\n\t\t\t},\n\n\t\t\tclearAllFilters() {\n\t\t\t\tthis.searchQuery = '';\n\t\t\t\tthis.filters = {\n\t\t\t\t\talertmanagers: [],\n\t\t\t\t\tseverities: [],\n\t\t\t\t\tstatuses: [],\n\t\t\t\t\tteams: []\n\t\t\t\t};\n\t\t\t\tthis.acknowledgmentFilter = null;\n\t\t\t\tthis.commentsFilter = null;\n\t\t\t\tthis.loadDashboardData();\n\t\t\t},\n\n\t\t\tclearFilter(filterType) {\n\t\t\t\tthis.filters[filterType] = [];\n\t\t\t\tthis.applyFilters();\n\t\t\t},\n\n\t\t\tremoveFilter(filterType, value) {\n\t\t\t\tconst index = this.filters[filterType].indexOf(value);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.filters[filterType].splice(index, 1);\n\t\t\t\t\tthis.applyFilters();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thasActiveFilters() {\n\t\t\t\treturn this.searchQuery.length > 0 ||\n\t\t\t\t\t   this.filters.alertmanagers.length > 0 ||\n\t\t\t\t\t   this.filters.severities.length > 0 ||\n\t\t\t\t\t   this.filters.statuses.length > 0 ||\n\t\t\t\t\t   this.filters.teams.length > 0 ||\n\t\t\t\t\t   this.acknowledgmentFilter !== null ||\n\t\t\t\t\t   this.commentsFilter !== null;\n\t\t\t},\n\n\t\t\t// Selection management\n\t\t\ttoggleAlert(fingerprint) {\n\t\t\t\tconst index = this.selectedAlerts.indexOf(fingerprint);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.selectedAlerts.splice(index, 1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.selectedAlerts.push(fingerprint);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttoggleGroup(groupName) {\n\t\t\t\tconst index = this.selectedGroups.indexOf(groupName);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.selectedGroups.splice(index, 1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.selectedGroups.push(groupName);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tselectAll() {\n\t\t\t\tif (this.viewMode === 'list') {\n\t\t\t\t\tthis.selectedAlerts = this.alerts.map(a => a.fingerprint);\n\t\t\t\t} else {\n\t\t\t\t\tthis.selectedGroups = this.groups.map(g => g.groupName);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tclearSelection() {\n\t\t\t\tthis.selectedAlerts = [];\n\t\t\t\tthis.selectedGroups = [];\n\t\t\t},\n\n\t\t\ttoggleSelectAll(event) {\n\t\t\t\tif (event.target.checked) {\n\t\t\t\t\tthis.selectAll();\n\t\t\t\t} else {\n\t\t\t\t\tthis.clearSelection();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Group expansion\n\t\t\ttoggleGroupExpanded(groupName) {\n\t\t\t\tconst index = this.expandedGroups.indexOf(groupName);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.expandedGroups.splice(index, 1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.expandedGroups.push(groupName);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Sorting\n\t\t\tsortBy(field) {\n\t\t\t\tif (this.sortField === field) {\n\t\t\t\t\tthis.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n\t\t\t\t} else {\n\t\t\t\t\tthis.sortField = field;\n\t\t\t\t\tthis.sortDirection = 'asc';\n\t\t\t\t}\n\t\t\t\tthis.loadDashboardData();\n\t\t\t},\n\n\t\t\t// Settings management\n\t\t\tloadSettings() {\n\t\t\t\tconst saved = localStorage.getItem('dashboardSettings');\n\t\t\t\tif (saved) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst settings = JSON.parse(saved);\n\t\t\t\t\t\tthis.settings = { ...this.settings, ...settings };\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn('Failed to parse saved settings:', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.applyTheme();\n\t\t\t\tthis.applyNotificationSettings();\n\t\t\t},\n\n\t\t\tasync saveSettings() {\n\t\t\t\ttry {\n\t\t\t\t\t// Get the settings modal instance to check active tab\n\t\t\t\t\tconst settingsModal = window.currentSettingsModal;\n\t\t\t\t\t\n\t\t\t\t\t// Check which tab is active and save appropriate settings\n\t\t\t\t\tif (settingsModal && settingsModal.activeTab === 'colors') {\n\t\t\t\t\t\t// Save color preferences\n\t\t\t\t\t\tconst success = await settingsModal.saveColorPreferences();\n\t\t\t\t\t\tif (success) {\n\t\t\t\t\t\t\tthis.showNotification('success', 'Color preferences saved');\n\t\t\t\t\t\t\tthis.showSettings = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (settingsModal && settingsModal.activeTab === 'notifications') {\n\t\t\t\t\t\t// Save notification preferences\n\t\t\t\t\t\tawait settingsModal.saveNotificationPreferences();\n\t\t\t\t\t\tthis.showSettings = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Otherwise, save general settings\n\t\t\t\t\tconst settingsResponse = await fetch('/api/v1/dashboard/settings', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(this.settings)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst settingsResult = await settingsResponse.json();\n\t\t\t\t\t\n\t\t\t\t\tif (!settingsResult.success) {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to save settings: ' + settingsResult.error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Save to localStorage as well\n\t\t\t\t\tlocalStorage.setItem('dashboardSettings', JSON.stringify(this.settings));\n\n\t\t\t\t\t// Apply theme change\n\t\t\t\t\tthis.applyTheme();\n\n\t\t\t\t\t// Apply notification queue settings\n\t\t\t\t\tthis.applyNotificationSettings();\n\n\t\t\t\t\tthis.showNotification('success', 'Settings saved');\n\t\t\t\t\tthis.showSettings = false;\n\t\t\t\t\t\n\t\t\t\t\t// Apply theme change\n\t\t\t\t\tthis.applyTheme();\n\t\t\t\t\t\n\t\t\t\t\t// Restart auto-refresh with new interval\n\t\t\t\t\tthis.startAutoRefresh();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error saving settings:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to save settings');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tapplyTheme() {\n\t\t\t\tconst isDark = this.settings.theme === 'dark';\n\t\t\t\tdocument.documentElement.classList.toggle('dark', isDark);\n\t\t\t\t\n\t\t\t\t// Update meta theme-color for mobile browsers\n\t\t\t\tconst metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n\t\t\t\tif (metaThemeColor) {\n\t\t\t\t\tmetaThemeColor.setAttribute('content', isDark ? '#1f2937' : '#ffffff');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tapplyNotificationSettings() {\n\t\t\t\t// Update notification delay from settings\n\t\t\t\tthis.notificationDelay = this.settings.notificationDelay || 1500;\n\t\t\t\t\n\t\t\t\t// Update max concurrent notifications from settings  \n\t\t\t\tthis.maxConcurrentNotifications = this.settings.maxConcurrentNotifications || 3;\n\t\t\t\t\n\t\t\t\t// Log the updated settings for debugging\n\t\t\t\tconsole.log('Notification settings applied:', {\n\t\t\t\t\tnotificationDelay: this.notificationDelay,\n\t\t\t\t\tmaxConcurrentNotifications: this.maxConcurrentNotifications,\n\t\t\t\t\tnotificationBatching: this.settings.notificationBatching,\n\t\t\t\t\tprioritizedNotifications: this.settings.prioritizedNotifications\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tasync testNotification() {\n\t\t\t\t// Check if browser notifications are supported\n\t\t\t\tif (!('Notification' in window)) {\n\t\t\t\t\tthis.showNotification('error', 'Browser notifications are not supported');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check current permission status\n\t\t\t\tif (Notification.permission === 'denied') {\n\t\t\t\t\tthis.showNotification('error', 'Notifications are blocked. Please enable them in your browser settings.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Request permission if not granted\n\t\t\t\tif (Notification.permission !== 'granted') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst permission = await Notification.requestPermission();\n\t\t\t\t\t\tif (permission !== 'granted') {\n\t\t\t\t\t\t\tthis.showNotification('warning', 'Notification permission denied. Please enable notifications to receive alerts.');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to request notification permission');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Create test alert object\n\t\t\t\tconst testAlert = {\n\t\t\t\t\tfingerprint: 'test-notification',\n\t\t\t\t\talertname: 'Test Notification',\n\t\t\t\t\tsummary: 'This is a test notification from the Notificator dashboard',\n\t\t\t\t\tseverity: 'info',\n\t\t\t\t\tstatus: 'firing',\n\t\t\t\t\tlabels: {\n\t\t\t\t\t\talertname: 'Test Notification',\n\t\t\t\t\t\tseverity: 'info'\n\t\t\t\t\t},\n\t\t\t\t\tannotations: {\n\t\t\t\t\t\tsummary: 'This is a test notification from the Notificator dashboard'\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Send both in-app and browser notifications\n\t\t\t\tthis.showInAppNotification(testAlert, 'Test notification sent successfully!');\n\t\t\t\t\n\t\t\t\t// Send browser notification with heroicon\n\t\t\t\ttry {\n\t\t\t\t\tconst notification = new Notification('Test Notification', {\n\t\t\t\t\t\tbody: 'This is a test notification from the Notificator dashboard',\n\t\t\t\t\t\ticon: '/static/images/info-icon.png',\n\t\t\t\t\t\ttag: 'test-notification',\n\t\t\t\t\t\trequireInteraction: false\n\t\t\t\t\t});\n\n\t\t\t\t\t// Auto-close after 5 seconds\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tnotification.close();\n\t\t\t\t\t}, 5000);\n\n\t\t\t\t\tthis.showNotification('success', 'Test notification sent! Check your system notifications.');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Failed to send browser notification:', error);\n\t\t\t\t\tthis.showNotification('warning', 'In-app notification sent, but browser notification failed');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Current user management\n\t\t\tasync loadCurrentUser() {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/auth/profile', {\n\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t});\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\tif (result.success && result.data) {\n\t\t\t\t\t\t\tthis.currentUser = {\n\t\t\t\t\t\t\t\tid: result.data.id,\n\t\t\t\t\t\t\t\tusername: result.data.username,\n\t\t\t\t\t\t\t\temail: result.data.email\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn('Failed to load current user:', error);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetCurrentUser() {\n\t\t\t\treturn this.currentUser;\n\t\t\t},\n\n\t\t\tgetUserInitials() {\n\t\t\t\tconst currentUser = this.getCurrentUser();\n\t\t\t\tif (!currentUser || !currentUser.username) {\n\t\t\t\t\treturn 'U'; // Fallback to 'U' if no user data\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst username = currentUser.username.trim();\n\t\t\t\tif (username.length === 0) {\n\t\t\t\t\treturn 'U';\n\t\t\t\t} else if (username.length === 1) {\n\t\t\t\t\treturn username.toUpperCase();\n\t\t\t\t} else {\n\t\t\t\t\t// Get first 2 characters and convert to uppercase\n\t\t\t\t\treturn username.substring(0, 2).toUpperCase();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Alias for backward compatibility\n\t\t\tgetInitials(username) {\n\t\t\t\tif (!username) {\n\t\t\t\t\t// If no username provided, use current user\n\t\t\t\t\treturn this.getUserInitials();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Direct username provided\n\t\t\t\tconst cleanUsername = username.trim();\n\t\t\t\tif (cleanUsername.length === 0) {\n\t\t\t\t\treturn 'U';\n\t\t\t\t} else if (cleanUsername.length === 1) {\n\t\t\t\t\treturn cleanUsername.toUpperCase();\n\t\t\t\t} else {\n\t\t\t\t\t// Get first 2 characters and convert to uppercase\n\t\t\t\t\treturn cleanUsername.substring(0, 2).toUpperCase();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcanDeleteComment(comment) {\n\t\t\t\tconst currentUser = this.getCurrentUser();\n\t\t\t\treturn currentUser && comment && (\n\t\t\t\t\tcurrentUser.id === comment.userId || \n\t\t\t\t\tcurrentUser.username === comment.username\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t// Column resizing utilities\n\t\t\tloadColumnWidths() {\n\t\t\t\tconst saved = localStorage.getItem('dashboardColumnWidths');\n\t\t\t\tif (saved) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst widths = JSON.parse(saved);\n\t\t\t\t\t\tthis.columnWidths = { ...this.columnWidths, ...widths };\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn('Failed to parse saved column widths:', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsaveColumnWidths() {\n\t\t\t\tlocalStorage.setItem('dashboardColumnWidths', JSON.stringify(this.columnWidths));\n\t\t\t},\n\n\t\t\tstartResize(event, column) {\n\t\t\t\tthis.isResizing = true;\n\t\t\t\tthis.currentColumn = column;\n\t\t\t\tthis.startX = event.clientX;\n\t\t\t\tthis.startWidth = this.columnWidths[column];\n\t\t\t\t\n\t\t\t\tevent.preventDefault();\n\t\t\t\tdocument.body.style.cursor = 'col-resize';\n\t\t\t\tdocument.body.style.userSelect = 'none';\n\t\t\t},\n\n\t\t\thandleMouseMove(event) {\n\t\t\t\tif (!this.isResizing || !this.currentColumn) return;\n\t\t\t\t\n\t\t\t\tconst diff = event.clientX - this.startX;\n\t\t\t\tconst newWidth = Math.max(50, this.startWidth + diff); // Minimum width of 50px\n\t\t\t\tthis.columnWidths[this.currentColumn] = newWidth;\n\t\t\t},\n\n\t\t\thandleMouseUp() {\n\t\t\t\tif (this.isResizing) {\n\t\t\t\t\tthis.isResizing = false;\n\t\t\t\t\tthis.currentColumn = null;\n\t\t\t\t\tthis.saveColumnWidths();\n\t\t\t\t\t\n\t\t\t\t\tdocument.body.style.cursor = '';\n\t\t\t\t\tdocument.body.style.userSelect = '';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tresetColumnWidths() {\n\t\t\t\t// Reset to default widths\n\t\t\t\tthis.columnWidths = {\n\t\t\t\t\talertName: 300,\n\t\t\t\t\tacknowledge: 75,\n\t\t\t\t\tinstance: 350,\n\t\t\t\t\tseverity: 150,\n\t\t\t\t\tstatus: 150,\n\t\t\t\t\tcomments: 130,\n\t\t\t\t\tteam: 200,\n\t\t\t\t\tsummary: 400,\n\t\t\t\t\tduration: 150,\n\t\t\t\t\tsource: 180\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// Clear saved widths\n\t\t\t\tlocalStorage.removeItem('dashboardColumnWidths');\n\t\t\t},\n\n\t\t\t// Format utilities\n\t\t\tformatDuration(seconds) {\n\t\t\t\tif (seconds < 60) {\n\t\t\t\t\treturn `${Math.floor(seconds)}s`;\n\t\t\t\t} else if (seconds < 3600) {\n\t\t\t\t\tconst minutes = Math.floor(seconds / 60);\n\t\t\t\t\tconst remainingSeconds = Math.floor(seconds % 60);\n\t\t\t\t\treturn `${minutes}m ${remainingSeconds}s`;\n\t\t\t\t} else {\n\t\t\t\t\tconst hours = Math.floor(seconds / 3600);\n\t\t\t\t\tconst remainingMinutes = Math.floor((seconds % 3600) / 60);\n\t\t\t\t\treturn `${hours}h ${remainingMinutes}m`;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tformatTimestamp(timestamp) {\n\t\t\t\treturn new Date(timestamp).toLocaleString();\n\t\t\t},\n\n\t\t\t// Alert color utilities\n\t\t\tgetAlertColor(alert, colorType = 'backgroundColor') {\n\t\t\t\tconst fingerprint = alert.fingerprint;\n\t\t\t\tif (this.alertColors[fingerprint]) {\n\t\t\t\t\tconst colorResult = this.alertColors[fingerprint];\n\t\t\t\t\tswitch (colorType) {\n\t\t\t\t\t\tcase 'backgroundColor': return colorResult.backgroundColor;\n\t\t\t\t\t\tcase 'textColor': return colorResult.textColor;\n\t\t\t\t\t\tcase 'borderColor': return colorResult.borderColor;\n\t\t\t\t\t\tcase 'badgeColor': return colorResult.badgeColor;\n\t\t\t\t\t\tdefault: return colorResult.backgroundColor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Fallback to default severity colors\n\t\t\t\treturn this.getDefaultSeverityColor(alert, colorType);\n\t\t\t},\n\n\t\t\t// Get default severity color (fallback)\n\t\t\tgetDefaultSeverityColor(alert, colorType = 'backgroundColor') {\n\t\t\t\tconst severity = alert.severity || 'default';\n\t\t\t\tconst colorMap = {\n\t\t\t\t\tcritical: {\n\t\t\t\t\t\tbackgroundColor: '#fee2e2', // red-100\n\t\t\t\t\t\ttextColor: '#991b1b',       // red-800\n\t\t\t\t\t\tborderColor: '#dc2626',     // red-600\n\t\t\t\t\t\tbadgeColor: '#dc2626'       // red-600\n\t\t\t\t\t},\n\t\t\t\t\t'critical-daytime': {\n\t\t\t\t\t\tbackgroundColor: '#ffe4e6', // rose-100\n\t\t\t\t\t\ttextColor: '#9f1239',       // rose-800\n\t\t\t\t\t\tborderColor: '#be123c',     // rose-700\n\t\t\t\t\t\tbadgeColor: '#be123c'       // rose-700\n\t\t\t\t\t},\n\t\t\t\t\twarning: {\n\t\t\t\t\t\tbackgroundColor: '#fef3c7', // amber-100\n\t\t\t\t\t\ttextColor: '#92400e',       // amber-800\n\t\t\t\t\t\tborderColor: '#d97706',     // amber-600\n\t\t\t\t\t\tbadgeColor: '#d97706'       // amber-600\n\t\t\t\t\t},\n\t\t\t\t\tinfo: {\n\t\t\t\t\t\tbackgroundColor: '#dbeafe', // blue-100\n\t\t\t\t\t\ttextColor: '#1e40af',       // blue-800\n\t\t\t\t\t\tborderColor: '#2563eb',     // blue-600\n\t\t\t\t\t\tbadgeColor: '#2563eb'       // blue-600\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tbackgroundColor: '#f3f4f6', // gray-100\n\t\t\t\t\t\ttextColor: '#374151',       // gray-700\n\t\t\t\t\t\tborderColor: '#6b7280',     // gray-500\n\t\t\t\t\t\tbadgeColor: '#6b7280'       // gray-500\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tconst colors = colorMap[severity] || colorMap.default;\n\t\t\t\treturn colors[colorType] || colors.backgroundColor;\n\t\t\t},\n\n\t\t\tgetAlertBgColor(alert) {\n\t\t\t\tif (!alert || !alert.fingerprint) return '';\n\t\t\t\t\n\t\t\t\tconst colorData = this.alertColors[alert.fingerprint];\n\t\t\t\tif (!colorData || !colorData.bgColor) return '';\n\t\t\t\t\n\t\t\t\treturn `background-color: ${colorData.bgColor}; color: ${colorData.textColor || '#000000'};`;\n\t\t\t},\n\n\t\t\tgetAlertTextColor(alert) {\n\t\t\t\tif (!alert || !alert.fingerprint) return '';\n\t\t\t\t\n\t\t\t\tconst colorData = this.alertColors[alert.fingerprint];\n\t\t\t\tif (!colorData || !colorData.textColor) return '';\n\t\t\t\t\n\t\t\t\treturn colorData.textColor;\n\t\t\t},\n\n\t\t\t// Quick Preview functionality\n\t\t\tpreviewTimeout: null,\n\t\t\tcurrentPreview: null,\n\n\t\t\tshowPreview(event, alert, delay = 300) {\n\t\t\t\t// Clear any existing preview or timeout\n\t\t\t\tthis.hidePreview();\n\t\t\t\t\n\t\t\t\t// Set timeout to show preview after delay\n\t\t\t\tthis.previewTimeout = setTimeout(() => {\n\t\t\t\t\tthis.createPreview(event, alert);\n\t\t\t\t}, delay);\n\t\t\t},\n\n\t\t\thidePreview() {\n\t\t\t\t// Clear timeout if it exists\n\t\t\t\tif (this.previewTimeout) {\n\t\t\t\t\tclearTimeout(this.previewTimeout);\n\t\t\t\t\tthis.previewTimeout = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Remove existing preview\n\t\t\t\tif (this.currentPreview) {\n\t\t\t\t\tthis.currentPreview.remove();\n\t\t\t\t\tthis.currentPreview = null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcreatePreview(event, alert) {\n\t\t\t\t// Create preview tooltip\n\t\t\t\tconst preview = document.createElement('div');\n\t\t\t\tpreview.className = 'fixed z-50 bg-white dark:bg-dark-bg-secondary border border-gray-200 dark:border-dark-border-DEFAULT rounded-lg shadow-xl p-4 max-w-sm';\n\t\t\t\tpreview.style.pointerEvents = 'none';\n\t\t\t\t\n\t\t\t\t// Build content\n\t\t\t\tconst severity = alert.severity || 'unknown';\n\t\t\t\tconst status = alert.status?.state || 'unknown';\n\t\t\t\tconst duration = this.calculateAlertDuration(alert);\n\t\t\t\t\n\t\t\t\tlet previewContent = '<div class=\"space-y-3\"><div>';\n\t\t\t\tpreviewContent += '<h4 class=\"font-semibold text-gray-900 dark:text-white text-sm line-clamp-2\">' + (alert.alertName || 'Unknown Alert') + '</h4>';\n\t\t\t\tpreviewContent += '</div><div class=\"flex items-center space-x-2\">';\n\t\t\t\tpreviewContent += '<span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ' + this.getSeverityClasses(severity) + '\">';\n\t\t\t\tpreviewContent += severity.toUpperCase() + '</span>';\n\t\t\t\tpreviewContent += '<span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ' + this.getStatusClasses(status) + '\">';\n\t\t\t\tpreviewContent += status.toUpperCase() + '</span>';\n\t\t\t\tif (alert.isAcknowledged) {\n\t\t\t\t\tpreviewContent += '<span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200\">ACK</span>';\n\t\t\t\t}\n\t\t\t\tpreviewContent += '</div>';\n\t\t\t\tif (alert.summary) {\n\t\t\t\t\tpreviewContent += '<p class=\"text-xs text-gray-600 dark:text-gray-400 line-clamp-3\">' + alert.summary + '</p>';\n\t\t\t\t}\n\t\t\t\tpreviewContent += '<div class=\"text-xs text-gray-500 dark:text-gray-400\">';\n\t\t\t\tpreviewContent += '<div>Duration: ' + duration + '</div>';\n\t\t\t\tif (alert.instance) {\n\t\t\t\t\tpreviewContent += '<div>Instance: ' + alert.instance + '</div>';\n\t\t\t\t}\n\t\t\t\tif (alert.source) {\n\t\t\t\t\tpreviewContent += '<div>Source: ' + alert.source + '</div>';\n\t\t\t\t}\n\t\t\t\tpreviewContent += '</div></div>';\n\t\t\t\t\n\t\t\t\tpreview.innerHTML = previewContent;\n\t\t\t\t\n\t\t\t\t// Position the preview\n\t\t\t\tdocument.body.appendChild(preview);\n\t\t\t\t\n\t\t\t\t// Calculate position\n\t\t\t\tconst rect = event.target.closest('tr').getBoundingClientRect();\n\t\t\t\tconst previewRect = preview.getBoundingClientRect();\n\t\t\t\t\n\t\t\t\tlet left = rect.left + rect.width + 10;\n\t\t\t\tlet top = rect.top + window.scrollY;\n\t\t\t\t\n\t\t\t\t// Adjust if it would go off screen\n\t\t\t\tif (left + previewRect.width > window.innerWidth) {\n\t\t\t\t\tleft = rect.left - previewRect.width - 10;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (top + previewRect.height > window.innerHeight + window.scrollY) {\n\t\t\t\t\ttop = window.innerHeight + window.scrollY - previewRect.height - 10;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpreview.style.left = Math.max(10, left) + 'px';\n\t\t\t\tpreview.style.top = Math.max(10, top) + 'px';\n\t\t\t\t\n\t\t\t\tthis.currentPreview = preview;\n\t\t\t},\n\n\t\t\tcalculateAlertDuration(alert) {\n\t\t\t\tif (!alert.startsAt) return 'N/A';\n\t\t\t\t\n\t\t\t\tconst start = new Date(alert.startsAt);\n\t\t\t\tconst end = alert.endsAt ? new Date(alert.endsAt) : new Date();\n\t\t\t\tconst diffMs = end - start;\n\t\t\t\t\n\t\t\t\tconst days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\t\t\t\tconst hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\t\t\t\tconst minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n\t\t\t\t\n\t\t\t\tif (days > 0) return `${days}d ${hours}h`;\n\t\t\t\tif (hours > 0) return `${hours}h ${minutes}m`;\n\t\t\t\treturn `${minutes}m`;\n\t\t\t},\n\n\t\t\tgetSeverityClasses(severity) {\n\t\t\t\tswitch (severity.toLowerCase()) {\n\t\t\t\t\tcase 'critical': return 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200';\n\t\t\t\t\tcase 'warning': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200';\n\t\t\t\t\tcase 'info': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200';\n\t\t\t\t\tdefault: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-200';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetStatusClasses(status) {\n\t\t\t\tswitch (status.toLowerCase()) {\n\t\t\t\t\tcase 'firing': return 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200';\n\t\t\t\t\tcase 'resolved': return 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200';\n\t\t\t\t\tcase 'suppressed': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-200';\n\t\t\t\t\tdefault: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-200';\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\t// Global function to handle logout response\n\t\twindow.handleLogoutResponse = function(event) {\n\t\t\ttry {\n\t\t\t\tconst xhr = event.detail.xhr;\n\t\t\t\t\n\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\t// Successful logout\n\t\t\t\t\tconst response = JSON.parse(xhr.responseText);\n\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t// Clear any cached user data\n\t\t\t\t\t\tlocalStorage.removeItem('dashboardSettings');\n\t\t\t\t\t\tlocalStorage.removeItem('dashboardColumnWidths');\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Show success message briefly before redirect\n\t\t\t\t\t\tif (window.dashboardInstance && window.dashboardInstance.showNotification) {\n\t\t\t\t\t\t\twindow.dashboardInstance.showNotification('success', 'Logged out successfully');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Redirect to login page after a brief delay\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.href = '/login';\n\t\t\t\t\t\t}, 500);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Logout failed\n\t\t\t\t\t\tif (window.dashboardInstance && window.dashboardInstance.showNotification) {\n\t\t\t\t\t\t\twindow.dashboardInstance.showNotification('error', 'Logout failed: ' + (response.error || 'Unknown error'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// HTTP error status\n\t\t\t\t\tif (window.dashboardInstance && window.dashboardInstance.showNotification) {\n\t\t\t\t\t\twindow.dashboardInstance.showNotification('error', 'Logout failed with status: ' + xhr.status);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error handling logout response:', error);\n\t\t\t\tif (window.dashboardInstance && window.dashboardInstance.showNotification) {\n\t\t\t\t\twindow.dashboardInstance.showNotification('error', 'Error processing logout response');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Fallback: redirect to login anyway in case of error\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.location.href = '/login';\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t};\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
