package scripts

templ DashboardNotifications() {
	<script>
		window.dashboardNotificationsMixin = {
			notificationConfig: {
				enabled: true,
				soundEnabled: true,
				browserNotifications: true,
				cooldownSeconds: 300,
				maxNotifications: 5,
				respectFilters: true,
				severityRules: {
					'critical': true,
					'major': true,
					'warning': true,
					'minor': false,
					'info': false,
					'unknown': false
				},
				soundConfig: {
					criticalFrequency: 800,
					criticalDuration: 200,
					criticalType: 'square',
					warningFrequency: 600,
					warningDuration: 150,
					warningType: 'sine',
					infoFrequency: 400,
					infoDuration: 100,
					infoType: 'sine'
				}
			},

			lastNotifications: new Map(),
			notificationQueue: [],
			activeNotifications: new Set(),
			isProcessingNotifications: false,
			notificationDelay: 1500,

			async initializeNotificationSystem() {
				await this.loadNotificationPreferences();
				this.initializeSounds();
				this.requestNotificationPermission();
			},

			async loadNotificationPreferences() {
				try {
					const response = await fetch('/api/v1/dashboard/notification-preferences', {
						credentials: 'include'
					});
					if (response.ok) {
						const result = await response.json();
						if (result.success && result.data.preference) {
							const preferences = result.data.preference;
							
							if (preferences.severity_rules) {
								const normalizedSeverityRules = {};
								Object.keys(preferences.severity_rules).forEach(severity => {
									normalizedSeverityRules[severity.toLowerCase()] = preferences.severity_rules[severity];
								});
								preferences.severityRules = normalizedSeverityRules;
								delete preferences.severity_rules;
							}
							
							if (preferences.sound_config) {
								preferences.soundConfig = { ...preferences.sound_config };
							}
							
							this.notificationConfig = { ...this.notificationConfig, ...preferences };
							console.log('Loaded user notification preferences:', this.notificationConfig);
						}
					}
				} catch (error) {
					console.warn('Failed to load notification preferences, using defaults:', error);
				}
			},

			async saveNotificationPreferences() {
				try {
					const response = await fetch('/api/v1/dashboard/notification-preferences', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						credentials: 'include',
						body: JSON.stringify({ preference: this.notificationConfig })
					});
					if (response.ok) {
						console.log('Notification preferences saved successfully');
					}
				} catch (error) {
					console.error('Failed to save notification preferences:', error);
				}
			},

			initializeSounds() {
				if (this.notificationConfig.soundEnabled) {
					this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
				}

				document.addEventListener('click', () => {
					if (this.audioContext && this.audioContext.state === 'suspended') {
						this.audioContext.resume();
					}
				}, { once: true });
			},

			requestNotificationPermission() {
				if ('Notification' in window && Notification.permission === 'default') {
					Notification.requestPermission().then(permission => {
						console.log('Notification permission:', permission);
					});
				}
			},

			processAlertsForNotifications(oldAlerts, newAlerts) {
				if (!this.notificationConfig.enabled) {
					console.log('Notifications disabled - skipping notification processing');
					return;
				}

				if (!this.hasInitiallyLoaded) {
					console.log('Initial load - skipping notifications for existing alerts');
					this.hasInitiallyLoaded = true;
					if (this.saveSessionState) {
						this.saveSessionState();
					}
					return;
				}

				console.log(`Processing alerts for notifications: ${oldAlerts.length} old alerts, ${newAlerts.length} new alerts`);

				const oldAlertKeys = new Set(oldAlerts.map(alert => this.generateAlertKey(alert)));
				const processedNotifications = [];

				for (const alert of newAlerts) {
					const alertKey = this.generateAlertKey(alert);
					
					if (oldAlertKeys.has(alertKey)) {
						continue;
					}

					if (this.shouldNotify(alert)) {
						processedNotifications.push(alert);
						console.log(`Will notify for new alert: ${alert.alertname || alert.alertName} (${alert.severity})`);
					}
				}

				if (processedNotifications.length > 0) {
					console.log(`Processing ${processedNotifications.length} notifications`);
					processedNotifications.forEach(alert => {
						this.queueNotification(alert);
					});
				}
			},

			generateAlertKey(alert) {
				return alert.fingerprint || `${alert.alertname || alert.alertName}_${alert.instance || ''}_${alert.job || ''}`;
			},

			shouldNotify(alert) {
				if (this.isAlertResolved(alert)) {
					console.log(`Skipping resolved alert: ${alert.alertname || alert.alertName}`);
					return false;
				}

				if (this.isAlertSilenced(alert)) {
					console.log(`Skipping silenced alert: ${alert.alertname || alert.alertName}`);
					return false;
				}

				const severity = (alert.severity || 'unknown').toLowerCase();
				if (!this.notificationConfig.severityRules[severity]) {
					console.log(`Skipping alert with disabled severity: ${severity}`);
					return false;
				}

				const alertKey = this.generateAlertKey(alert);
				const now = Date.now();
				const lastNotification = this.lastNotifications.get(alertKey);
				if (lastNotification && (now - lastNotification) < (this.notificationConfig.cooldownSeconds * 1000)) {
					console.log(`Skipping alert due to cooldown: ${alert.alertname || alert.alertName}`);
					return false;
				}

				if (this.notificationConfig.respectFilters && window.dashboardInstance) {
					if (!this.matchesFilters(alert)) {
						console.log(`Skipping alert that doesn't match current filters: ${alert.alertname || alert.alertName}`);
						return false;
					}
				}

				return true;
			},

			isAlertResolved(alert) {
				return alert.status === 'resolved' ||
					   alert.status?.state === 'resolved' ||
					   alert.Status?.State === 'resolved';
			},

			isAlertSilenced(alert) {
				return alert.status === 'suppressed' ||
					   alert.status?.state === 'suppressed' ||
					   alert.Status?.State === 'suppressed' ||
					   alert.status === 'silenced' ||
					   alert.status?.state === 'silenced' ||
					   alert.Status?.State === 'silenced' ||
					   (alert.status?.silencedBy && alert.status.silencedBy.length > 0) ||
					   (alert.Status?.SilencedBy && alert.Status.SilencedBy.length > 0);
			},

			matchesFilters(alert) {
				if (!window.dashboardInstance || !window.dashboardInstance.filters) {
					return true;
				}

				const filters = window.dashboardInstance.filters;
				
				if (filters.search && filters.search.trim()) {
					const searchTerm = filters.search.toLowerCase();
					const alertText = `${alert.alertname || alert.alertName} ${alert.summary || ''} ${alert.description || ''}`.toLowerCase();
					if (!alertText.includes(searchTerm)) {
						return false;
					}
				}

				if (filters.severity && filters.severity !== 'all') {
					if ((alert.severity || 'unknown').toLowerCase() !== filters.severity.toLowerCase()) {
						return false;
					}
				}

				if (filters.status && filters.status !== 'all') {
					const alertStatus = (alert.status?.state || alert.Status?.State || alert.status || 'firing').toLowerCase();
					if (alertStatus !== filters.status.toLowerCase()) {
						return false;
					}
				}

				return true;
			},


			queueNotification(alert, highPriority = false) {
				if (this.notificationQueue.length >= this.notificationConfig.maxNotifications) {
					console.log('Notification queue full, skipping notification');
					return;
				}

				if (highPriority) {
					this.notificationQueue.unshift(alert);
				} else {
					this.notificationQueue.push(alert);
				}
				this.processNotificationQueue();
			},


			async processNotificationQueue() {
				if (this.isProcessingNotifications || this.notificationQueue.length === 0) {
					return;
				}

				const maxConcurrent = this.notificationConfig.maxNotifications || 5;
				if (this.activeNotifications.size >= maxConcurrent) {
					return;
				}

				this.isProcessingNotifications = true;

				while (this.notificationQueue.length > 0 && this.activeNotifications.size < maxConcurrent) {
					const alert = this.notificationQueue.shift();
					await this.displayNotification(alert);

					if (this.notificationQueue.length > 0) {
						await new Promise(resolve => setTimeout(resolve, this.notificationDelay));
					}
				}

				this.isProcessingNotifications = false;

				if (this.notificationQueue.length > 0) {
					this.notificationProcessingTimer = setTimeout(() => {
						this.processNotificationQueue();
					}, this.notificationDelay);
				}
			},


			async displayNotification(alert) {
				const alertKey = this.generateAlertKey(alert);
				const now = Date.now();
				
				this.lastNotifications.set(alertKey, now);

				let title, body;
				const severity = (alert.severity || 'unknown').toLowerCase();
				const alertName = alert.alertname || alert.alertName || 'Unknown Alert';

				if (alert.isBatch) {
					title = `${alert.count} New ${severity.charAt(0).toUpperCase() + severity.slice(1)} Alerts`;
					body = `${alert.count} new ${severity} alerts have been received`;
				} else {
					title = `New ${severity.charAt(0).toUpperCase() + severity.slice(1)} Alert`;
					body = alertName + (alert.instance ? ` on ${alert.instance}` : '');
				}

				if (this.notificationConfig.soundEnabled) {
					this.playNotificationSound(severity);
				}

				if (this.notificationConfig.browserNotifications && 'Notification' in window && Notification.permission === 'granted') {
					let iconPath;
					if (alert.severity === 'critical') {
						iconPath = '/static/images/critical-icon.png';
					} else if (alert.severity === 'warning') {
						iconPath = '/static/images/warning-icon.png';
					} else if (alert.severity === 'success') {
						iconPath = '/static/images/success-icon.png';
					} else if (alert.severity === 'info') {
						iconPath = '/static/images/info-icon.png';
					} else {
						iconPath = '/static/images/default-icon.png';
					}

					const notification = new Notification(title, {
						body: body,
						icon: iconPath,
						tag: alert.isBatch ? `batch-${alert.severity}` : alert.fingerprint,
						requireInteraction: alert.severity === 'critical'
					});

					const notificationId = alert.isBatch ? `batch-${alert.severity}` : alert.fingerprint;
					this.activeNotifications.add(notificationId);

					notification.onclose = () => {
						this.activeNotifications.delete(notificationId);
					};

					if (alert.severity !== 'critical') {
						setTimeout(() => {
							notification.close();
						}, 5000);
					}

					notification.onclick = () => {
						window.focus();
						if (!alert.isBatch && alert.fingerprint) {
							this.showAlertDetails(alert.fingerprint);
						}
						notification.close();
					};
				} else {
					this.showInAppNotification(alert.severity, title + ': ' + body);
				}
			},

			showInAppNotification(type, message) {
				const notificationId = 'notif-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
				this.activeNotifications.add(notificationId);

				this.playNotificationSound(type);

				const notification = document.createElement('div');
				notification.id = notificationId;
				notification.className = `mb-2 p-4 rounded-lg shadow-lg transition-all duration-300 ${
					type === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-200' :
					type === 'error' ? 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-200' :
					type === 'warning' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-200' :
					type === 'critical' ? 'bg-red-200 text-red-900 dark:bg-red-900 dark:text-red-100 border-2 border-red-500' :
					type === 'info' ? 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200' :
					'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200'
				}`;
				
				let iconSvg;
				if (type === 'success') {
					iconSvg = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`;
				} else if (type === 'error' || type === 'critical') {
					iconSvg = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`;
				} else if (type === 'warning') {
					iconSvg = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>`;
				} else if (type === 'info') {
					iconSvg = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`;
				} else {
					iconSvg = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path></svg>`;
				}
				
				notification.innerHTML = `
					<div class="flex items-center justify-between">
						<div class="flex items-center">
							<div class="flex-shrink-0 mr-3">
								${iconSvg}
							</div>
							<div class="text-sm font-medium">${message}</div>
						</div>
						<button onclick="this.parentElement.parentElement.remove(); window.dashboardInstance?.activeNotifications?.delete('${notificationId}')" class="ml-4 text-lg leading-none hover:opacity-70">×</button>
					</div>
				`;

				let container = document.getElementById('notification-container');
				if (!container) {
					container = document.createElement('div');
					container.id = 'notification-container';
					container.className = 'fixed top-4 right-4 z-50 max-w-sm';
					document.body.appendChild(container);
				}

				container.appendChild(notification);

				const autoRemoveDelay = type === 'critical' ? 10000 : type === 'error' ? 7000 : 5000;
				setTimeout(() => {
					if (notification.parentElement) {
						notification.style.opacity = '0';
						notification.style.transform = 'translateX(100%)';
						setTimeout(() => {
							if (notification.parentElement) {
								notification.remove();
								this.activeNotifications.delete(notificationId);
							}
						}, 300);
					}
				}, autoRemoveDelay);
			},

			showNotification(type, message) {
				this.showInAppNotification(type, message);
			},

			playNotificationSound(severity) {
				if (!this.notificationConfig.soundEnabled || !this.audioContext) {
					return;
				}

				try {
					const soundConfig = this.getSoundConfigForSeverity(severity);
					
					const oscillator = this.audioContext.createOscillator();
					const gainNode = this.audioContext.createGain();
					
					oscillator.connect(gainNode);
					gainNode.connect(this.audioContext.destination);
					
					oscillator.frequency.setValueAtTime(soundConfig.frequency, this.audioContext.currentTime);
					oscillator.type = soundConfig.type;
					
					gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);
					gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + soundConfig.duration / 1000);
					
					oscillator.start(this.audioContext.currentTime);
					oscillator.stop(this.audioContext.currentTime + soundConfig.duration / 1000);
				} catch (error) {
					console.warn('Failed to play notification sound:', error);
				}
			},

			getSoundConfigForSeverity(severity) {
				const config = this.notificationConfig.soundConfig || {};
				const severityLower = severity.toLowerCase();
				
				const freqKey = `${severityLower}_frequency`;
				const durKey = `${severityLower}_duration`;
				const typeKey = `${severityLower}_type`;
				
				if (config[freqKey] !== undefined) {
					return {
						frequency: config[freqKey] || 500,
						duration: config[durKey] || 150,
						type: config[typeKey] || 'sine'
					};
				}
				
				switch (severityLower) {
					case 'critical':
					case 'major':
						return {
							frequency: config.criticalFrequency || 800,
							duration: config.criticalDuration || 200,
							type: config.criticalType || 'square'
						};
					case 'warning':
					case 'minor':
						return {
							frequency: config.warningFrequency || 600,
							duration: config.warningDuration || 150,
							type: config.warningType || 'sine'
						};
					case 'info':
					case 'information':
						return {
							frequency: config.infoFrequency || 400,
							duration: config.infoDuration || 100,
							type: config.infoType || 'sine'
						};
					default:
						return {
							frequency: 500,
							duration: 120,
							type: 'triangle'
						};
				}
			},

			playSound(severity) {
				this.playNotificationSound(severity);
			},

			applyNotificationSettings() {
				this.notificationDelay = 1500;

				if (this.notificationProcessingTimer) {
					clearTimeout(this.notificationProcessingTimer);
					this.notificationProcessingTimer = null;
				}

				if (this.notificationConfig.browserNotifications && 'Notification' in window && Notification.permission === 'default') {
					Notification.requestPermission().then(permission => {
						console.log('Notification permission:', permission);
					});
				}

				if (this.notificationConfig.soundEnabled && !this.audioContext) {
					this.initializeSounds();
				}
			},

			updateNotificationConfig(newConfig) {
				if (newConfig.severity_rules) {
					const normalizedSeverityRules = {};
					Object.keys(newConfig.severity_rules).forEach(severity => {
						normalizedSeverityRules[severity.toLowerCase()] = newConfig.severity_rules[severity];
					});
					newConfig.severityRules = normalizedSeverityRules;
					delete newConfig.severity_rules;
				}
				
				if (newConfig.sound_config) {
					newConfig.soundConfig = { ...newConfig.sound_config };
				}
				
				this.notificationConfig = { ...this.notificationConfig, ...newConfig };
				this.applyNotificationSettings();
				this.saveNotificationPreferences();
			},

			checkForNewAlerts(oldAlerts, newAlerts) {
				this.processAlertsForNotifications(oldAlerts, newAlerts);
			}
		};
	</script>
}