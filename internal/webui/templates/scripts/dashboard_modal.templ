package scripts

templ DashboardModal() {
	<script>
		window.dashboardModalMixin = {
			// Auto-refresh for modal
			modalRefreshInterval: null,
			modalRefreshRate: 5000, // 5 seconds
			
			// Modal resizing
			modalSize: { width: 1200, height: 700 },
			defaultModalSize: { width: 1200, height: 700 },
			isResizing: false,
			resizeStartPos: { x: 0, y: 0 },
			resizeStartSize: { width: 0, height: 0 },

			async showAlertDetails(fingerprint) {
				this.alertDetailsLoading = true;
				this.loading = true; // Sync loading state for injected content
				this.showAlertModal = true;
				this.currentAlertFingerprint = fingerprint;
				
				// Initialize variables needed by injected content
				this.alertId = fingerprint;
				this.error = null;
				this.currentTab = 'overview';
				this.alertDetails = null; // Clear previous data
				
				// Initialize modal resize functionality
				this.initModalResize();
				
				// Start auto-refresh for modal
				this.startModalAutoRefresh();
				
				// Apply modal size after a brief delay to ensure modal is rendered
				setTimeout(() => {
					this.applyModalSize();
				}, 100);

				// Preserve query parameters when updating URL
				const currentPath = window.location.pathname;
				const currentQuery = window.location.search;
				const newPath = `/dashboard/alert/${fingerprint}${currentQuery}`;
				if (currentPath !== newPath.split('?')[0]) {
					window.history.pushState({ alertId: fingerprint }, '', newPath);
				}

				try {
					// Fetch the standalone alert page HTML content
					console.log(`Fetching alert content from: /alert/${fingerprint}`);
					const response = await fetch(`/alert/${fingerprint}`, {
						credentials: 'include',
						headers: {
							'Accept': 'text/html',
							'Cache-Control': 'no-cache'
						}
					});
					
					console.log(`Response status: ${response.status}, headers:`, response.headers);
					
					if (response.ok) {
						const htmlContent = await response.text();
						console.log('Fetched HTML content length:', htmlContent.length);
						console.log('HTML content preview:', htmlContent.substring(0, 500));
						
						// Parse the HTML and extract the content we need
						const tempDiv = document.createElement('div');
						tempDiv.innerHTML = htmlContent;
						
						console.log('Parsed DOM structure:', tempDiv);
						
						// Try multiple selectors to find the Alpine.js content
						let mainContent = null;
						
						// Try exact match first
						mainContent = tempDiv.querySelector('[x-data="alertDetailsStandalone()"]');
						console.log('Exact match result:', mainContent);
						
						// Try contains match if exact fails
						if (!mainContent) {
							mainContent = tempDiv.querySelector('[x-data*="alertDetailsStandalone"]');
							console.log('Contains match result:', mainContent);
						}
						
						// Try finding by class if selector fails
						if (!mainContent) {
							mainContent = tempDiv.querySelector('.min-h-screen');
							console.log('Class-based match result:', mainContent);
						}
						
						if (mainContent) {
							console.log('Found main content element:', mainContent);
							console.log('Element attributes:', mainContent.attributes);
							
							// Clone the content and remove navigation elements that don't belong in modal
							const contentClone = mainContent.cloneNode(true);
							
							// Remove the header section with navigation buttons
							const header = contentClone.querySelector('header');
							if (header) {
								header.remove();
								console.log('Removed header navigation from modal content');
							}
							
							// Get the cleaned inner content
							const innerContent = contentClone.innerHTML;
							console.log('Extracted inner content length:', innerContent.length);
							console.log('Inner content preview:', innerContent.substring(0, 300));
							
							// Insert the content into the modal
							const modalContent = document.getElementById('modal-alert-content');
							console.log('Modal content container:', modalContent);
							
							if (modalContent) {
								modalContent.innerHTML = innerContent;
								console.log('Content injected into modal');
								
								// Load alert data for the injected content
								await this.loadAlertDataForModal(fingerprint);
								
								// Reinitialize Alpine.js for the new content
								if (window.Alpine) {
									console.log('Reinitializing Alpine.js for modal content');
									window.Alpine.initTree(modalContent);
								} else {
									console.warn('Alpine.js not available');
								}
							} else {
								console.error('Modal content container not found');
								this.error = 'Modal container not found';
								this.showNotification('error', this.error);
								this.closeAlertModal();
							}
						} else {
							console.error('Could not find alert content in fetched HTML');
							console.log('Available elements with x-data:', tempDiv.querySelectorAll('[x-data]'));
							this.error = 'Failed to parse alert content';
							this.showNotification('error', this.error);
							this.closeAlertModal();
						}
					} else {
						// Check if it's a redirect to login
						if (response.status === 302 || response.url?.includes('/login')) {
							this.error = 'Authentication required. Please refresh the page and try again.';
						} else {
							this.error = `Failed to load alert details: HTTP ${response.status}`;
						}
						console.error('Failed to fetch alert content:', response.status, response.statusText);
						this.showNotification('error', this.error);
						this.closeAlertModal();
					}
				} catch (error) {
					console.error('Error loading alert details:', error);
					this.error = 'Failed to load alert details';
					this.showNotification('error', this.error);
					this.closeAlertModal();
				} finally {
					this.alertDetailsLoading = false;
					this.loading = false; // Sync loading state for injected content
				}
			},

			closeAlertModal() {
				this.showAlertModal = false;
				this.currentAlertFingerprint = null;
				
				// Stop auto-refresh
				this.stopModalAutoRefresh();
				
				// Clear variables used by injected content
				this.alertId = null;
				this.error = null;
				this.currentTab = 'overview';
				this.loading = false;
				this.alertDetails = null;
				
				// Clear the modal content
				const modalContent = document.getElementById('modal-alert-content');
				if (modalContent) {
					modalContent.innerHTML = '';
				}
				
				// Preserve query parameters when closing modal
				if (window.location.pathname.includes('/alert/')) {
					const currentQuery = window.location.search;
					window.history.pushState({}, '', `/dashboard${currentQuery}`);
				}
			},

			startModalAutoRefresh() {
				this.stopModalAutoRefresh(); // Clear any existing interval
				this.modalRefreshInterval = setInterval(() => {
					if (this.showAlertModal && this.currentAlertFingerprint && !this.loading && !document.hidden) {
						this.refreshModalAlertDetails();
					}
				}, this.modalRefreshRate);
			},

			stopModalAutoRefresh() {
				if (this.modalRefreshInterval) {
					clearInterval(this.modalRefreshInterval);
					this.modalRefreshInterval = null;
				}
			},

			async refreshModalAlertDetails() {
				if (!this.currentAlertFingerprint) return;
				
				try {
					// If using injected content, let the injected page handle its own refresh
					if (this.currentAlertFingerprint) {
						// Find the injected Alpine.js instance and trigger refresh if it exists
						const modalContent = document.getElementById('modal-alert-content');
						if (modalContent && modalContent._x_dataStack) {
							const alertInstance = modalContent._x_dataStack[0];
							if (alertInstance && typeof alertInstance.refreshAlertDetails === 'function') {
								alertInstance.refreshAlertDetails();
								return;
							}
						}
					}
					
					// Fallback: refresh data via API for legacy modal content
					await this.loadAlertDataForModal(this.currentAlertFingerprint);
				} catch (error) {
					console.warn('Modal auto-refresh failed:', error);
				}
			},

			// Load alert data via API for injected modal content
			async loadAlertDataForModal(fingerprint) {
				console.log(`Loading alert data for modal: ${fingerprint}`);
				
				try {
					const response = await fetch(`/api/v1/dashboard/alert/${fingerprint}`, {
						credentials: 'include'
					});
					
					const result = await response.json();
					console.log('Alert data API response:', result);
					
					if (result.success) {
						this.alertDetails = result.data;
						console.log('Set alertDetails for injected content:', this.alertDetails);
					} else {
						console.error('Failed to load alert data:', result.error);
						this.error = result.error || 'Failed to load alert data';
					}
				} catch (error) {
					console.error('Error loading alert data for modal:', error);
					this.error = 'Network error loading alert data';
				}
			},

			// Modal resizing functionality
			initModalResize() {
				// Load saved modal size from localStorage
				const savedSize = localStorage.getItem('modalSize');
				if (savedSize) {
					try {
						this.modalSize = JSON.parse(savedSize);
					} catch (e) {
						console.warn('Failed to parse saved modal size:', e);
					}
				}
				
				// Add global mouse event listeners
				document.addEventListener('mousemove', (e) => this.handleMouseMove(e));
				document.addEventListener('mouseup', () => this.stopResize());
			},

			startResize(event) {
				this.isResizing = true;
				this.resizeStartPos = { x: event.clientX, y: event.clientY };
				this.resizeStartSize = { width: this.modalSize.width, height: this.modalSize.height };
				
				event.preventDefault();
				document.body.style.cursor = 'nw-resize';
				document.body.style.userSelect = 'none';
			},

			handleMouseMove(event) {
				if (!this.isResizing) return;
				
				const deltaX = event.clientX - this.resizeStartPos.x;
				const deltaY = event.clientY - this.resizeStartPos.y;
				
				// Calculate new size with minimum constraints
				const newWidth = Math.max(400, Math.min(window.innerWidth - 40, this.resizeStartSize.width + deltaX));
				const newHeight = Math.max(300, Math.min(window.innerHeight - 40, this.resizeStartSize.height + deltaY));
				
				this.modalSize = { width: newWidth, height: newHeight };
				this.applyModalSize();
			},

			stopResize() {
				if (this.isResizing) {
					this.isResizing = false;
					document.body.style.cursor = '';
					document.body.style.userSelect = '';
					
					// Save modal size to localStorage
					localStorage.setItem('modalSize', JSON.stringify(this.modalSize));
				}
			},

			applyModalSize() {
				const modalPanel = document.querySelector('.alert-modal-panel');
				if (modalPanel) {
					modalPanel.style.width = this.modalSize.width + 'px';
					modalPanel.style.height = this.modalSize.height + 'px';
					modalPanel.style.maxWidth = 'none';
					modalPanel.style.maxHeight = 'none';
				}
			},

			resetModalSize() {
				this.modalSize = { ...this.defaultModalSize };
				this.applyModalSize();
				localStorage.removeItem('modalSize');
			},

			// Alert action functions for dashboard modal context
			silenceAlert(fingerprint) {
				// Use the same data source as copyAlertLink - the loaded alert details
				const alert = this.alertDetails?.alert;
				
				if (!alert) {
					// If alert details aren't loaded yet, wait a moment and try again
					setTimeout(() => {
						if (this.alertDetails?.alert) {
							this.silenceAlert(fingerprint);
						} else {
							this.showNotification('error', 'Alert information not available');
						}
					}, 100);
					return;
				}
				
				// Debug logging
				console.log('silenceAlert called with fingerprint:', fingerprint);
				console.log('alertDetails.alert.fingerprint:', alert.fingerprint);
				
				// Set up the silence modal with the loaded alert
				// Note: We trust that the modal contains the correct alert since it was opened with this fingerprint
				this.currentSilenceAlert = alert;
				this.silenceAction = 'single';
				this.silenceReason = '';
				this.silenceError = '';
				this.silenceDuration = '1h';
				this.silenceDurationType = 'preset';
				this.customSilenceDuration = '';
				this.customDurationError = '';
				this.showSilenceModal = true;
			},

			acknowledgeAlert(fingerprint) {
				// Use the same data source as copyAlertLink - the loaded alert details
				const alert = this.alertDetails?.alert;
				
				if (!alert) {
					// If alert details aren't loaded yet, wait a moment and try again
					setTimeout(() => {
						if (this.alertDetails?.alert) {
							this.acknowledgeAlert(fingerprint);
						} else {
							this.showNotification('error', 'Alert information not available');
						}
					}, 100);
					return;
				}
				
				// Debug logging
				console.log('acknowledgeAlert called with fingerprint:', fingerprint);
				console.log('alertDetails.alert.fingerprint:', alert.fingerprint);
				
				// Set up the acknowledge modal with the loaded alert
				// Note: We trust that the modal contains the correct alert since it was opened with this fingerprint
				this.currentAckAlert = alert;
				this.ackAction = 'single';
				this.ackReason = '';
				this.ackError = '';
				this.showAckModal = true;
			},

			// NOTE: Other alert actions (comments, related alerts, etc.) are handled
			// by the standalone alert page content that gets loaded into this modal
		};
	</script>
}
