package scripts

templ DashboardModal() {
	<script>
		window.dashboardModalMixin = {
			async showAlertDetails(fingerprint) {
				this.alertDetailsLoading = true;
				this.loading = true; // Sync loading state for injected content
				this.showAlertModal = true;
				this.currentAlertFingerprint = fingerprint;
				
				// Initialize variables needed by injected content
				this.alertId = fingerprint;
				this.error = null;
				this.currentTab = 'overview';
				this.alertDetails = null; // Clear previous data

				const currentPath = window.location.pathname;
				const newPath = `/dashboard/alert/${fingerprint}`;
				if (currentPath !== newPath) {
					window.history.pushState({ alertId: fingerprint }, '', newPath);
				}

				try {
					// Fetch the standalone alert page HTML content
					console.log(`Fetching alert content from: /alert/${fingerprint}`);
					const response = await fetch(`/alert/${fingerprint}`, {
						credentials: 'include',
						headers: {
							'Accept': 'text/html',
							'Cache-Control': 'no-cache'
						}
					});
					
					console.log(`Response status: ${response.status}, headers:`, response.headers);
					
					if (response.ok) {
						const htmlContent = await response.text();
						console.log('Fetched HTML content length:', htmlContent.length);
						console.log('HTML content preview:', htmlContent.substring(0, 500));
						
						// Parse the HTML and extract the content we need
						const tempDiv = document.createElement('div');
						tempDiv.innerHTML = htmlContent;
						
						console.log('Parsed DOM structure:', tempDiv);
						
						// Try multiple selectors to find the Alpine.js content
						let mainContent = null;
						
						// Try exact match first
						mainContent = tempDiv.querySelector('[x-data="alertDetailsStandalone()"]');
						console.log('Exact match result:', mainContent);
						
						// Try contains match if exact fails
						if (!mainContent) {
							mainContent = tempDiv.querySelector('[x-data*="alertDetailsStandalone"]');
							console.log('Contains match result:', mainContent);
						}
						
						// Try finding by class if selector fails
						if (!mainContent) {
							mainContent = tempDiv.querySelector('.min-h-screen');
							console.log('Class-based match result:', mainContent);
						}
						
						if (mainContent) {
							console.log('Found main content element:', mainContent);
							console.log('Element attributes:', mainContent.attributes);
							
							// Clone the content and remove navigation elements that don't belong in modal
							const contentClone = mainContent.cloneNode(true);
							
							// Remove the header section with navigation buttons
							const header = contentClone.querySelector('header');
							if (header) {
								header.remove();
								console.log('Removed header navigation from modal content');
							}
							
							// Get the cleaned inner content
							const innerContent = contentClone.innerHTML;
							console.log('Extracted inner content length:', innerContent.length);
							console.log('Inner content preview:', innerContent.substring(0, 300));
							
							// Insert the content into the modal
							const modalContent = document.getElementById('modal-alert-content');
							console.log('Modal content container:', modalContent);
							
							if (modalContent) {
								modalContent.innerHTML = innerContent;
								console.log('Content injected into modal');
								
								// Load alert data for the injected content
								await this.loadAlertDataForModal(fingerprint);
								
								// Reinitialize Alpine.js for the new content
								if (window.Alpine) {
									console.log('Reinitializing Alpine.js for modal content');
									window.Alpine.initTree(modalContent);
								} else {
									console.warn('Alpine.js not available');
								}
							} else {
								console.error('Modal content container not found');
								this.error = 'Modal container not found';
								this.showNotification('error', this.error);
								this.closeAlertModal();
							}
						} else {
							console.error('Could not find alert content in fetched HTML');
							console.log('Available elements with x-data:', tempDiv.querySelectorAll('[x-data]'));
							this.error = 'Failed to parse alert content';
							this.showNotification('error', this.error);
							this.closeAlertModal();
						}
					} else {
						// Check if it's a redirect to login
						if (response.status === 302 || response.url?.includes('/login')) {
							this.error = 'Authentication required. Please refresh the page and try again.';
						} else {
							this.error = `Failed to load alert details: HTTP ${response.status}`;
						}
						console.error('Failed to fetch alert content:', response.status, response.statusText);
						this.showNotification('error', this.error);
						this.closeAlertModal();
					}
				} catch (error) {
					console.error('Error loading alert details:', error);
					this.error = 'Failed to load alert details';
					this.showNotification('error', this.error);
					this.closeAlertModal();
				} finally {
					this.alertDetailsLoading = false;
					this.loading = false; // Sync loading state for injected content
				}
			},

			closeAlertModal() {
				this.showAlertModal = false;
				this.currentAlertFingerprint = null;
				
				// Clear variables used by injected content
				this.alertId = null;
				this.error = null;
				this.currentTab = 'overview';
				this.loading = false;
				this.alertDetails = null;
				
				// Clear the modal content
				const modalContent = document.getElementById('modal-alert-content');
				if (modalContent) {
					modalContent.innerHTML = '';
				}
				
				if (window.location.pathname.includes('/alert/')) {
					window.history.pushState({}, '', '/dashboard');
				}
			},

			// Load alert data via API for injected modal content
			async loadAlertDataForModal(fingerprint) {
				console.log(`Loading alert data for modal: ${fingerprint}`);
				
				try {
					const response = await fetch(`/api/v1/dashboard/alert/${fingerprint}`, {
						credentials: 'include'
					});
					
					const result = await response.json();
					console.log('Alert data API response:', result);
					
					if (result.success) {
						this.alertDetails = result.data;
						console.log('Set alertDetails for injected content:', this.alertDetails);
					} else {
						console.error('Failed to load alert data:', result.error);
						this.error = result.error || 'Failed to load alert data';
					}
				} catch (error) {
					console.error('Error loading alert data for modal:', error);
					this.error = 'Network error loading alert data';
				}
			},

			// NOTE: All alert action functions (acknowledge, silence, comments, etc.) are now handled
			// by the standalone alert page that gets loaded into this modal. This provides a single
			// source of truth and eliminates code duplication.
		};
	</script>
}
