// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DashboardSettings() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\t// Settings Modal Data Handler\n\t\tfunction settingsModalData() {\n\t\t\treturn {\n\t\t\t\tactiveTab: 'general',\n\t\t\t\tcolorPreferences: [],\n\t\t\t\tavailableLabels: {}, // labelKey -> [values]\n\t\t\t\tavailableLabelsLastLoaded: null, // timestamp for cache expiry\n\t\t\t\t\n\t\t\t\tasync init() {\n\t\t\t\t\tconsole.log('Settings modal initializing...');\n\t\t\t\t\tawait this.loadColorPreferences();\n\t\t\t\t\tawait this.loadAvailableLabels();\n\t\t\t\t\t// Ensure the global reference is set\n\t\t\t\t\twindow.currentSettingsModal = this;\n\t\t\t\t\tconsole.log('Settings modal initialized, window.currentSettingsModal set:', !!window.currentSettingsModal);\n\t\t\t\t},\n\n\t\t\t\tasync loadColorPreferences() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/color-preferences', {\n\t\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\t\t\tthis.colorPreferences = (result.data.preferences || []).map(pref => ({\n\t\t\t\t\t\t\t\t\t...pref,\n\t\t\t\t\t\t\t\t\tid: pref.id || Date.now() + Math.random(), // Ensure each has an ID for tracking\n\t\t\t\t\t\t\t\t\tisEditing: false\n\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t\tconsole.log('Loaded color preferences:', this.colorPreferences.length);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error loading color preferences:', error);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tasync loadAvailableLabels() {\n\t\t\t\t\t// Skip if recently loaded (cache for 5 minutes)\n\t\t\t\t\tconst now = Date.now();\n\t\t\t\t\tif (this.availableLabelsLastLoaded && (now - this.availableLabelsLastLoaded) < 5 * 60 * 1000) {\n\t\t\t\t\t\tconsole.log('Using cached available labels');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconsole.log('Loading available labels...');\n\t\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/available-labels', {\n\t\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\t\t\tthis.availableLabels = result.data.labels || {};\n\t\t\t\t\t\t\t\tthis.availableLabelsLastLoaded = now;\n\t\t\t\t\t\t\t\tconsole.log('Loaded available labels:', Object.keys(this.availableLabels).length, 'label keys');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error loading available labels:', error);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Color preference management\n\t\t\t\taddColorPreference() {\n\t\t\t\t\tconst newPref = {\n\t\t\t\t\t\tid: Date.now() + Math.random(),\n\t\t\t\t\t\tlabelKey: '',\n\t\t\t\t\t\tlabelValue: '',\n\t\t\t\t\t\tbgColor: '#ff9999',\n\t\t\t\t\t\ttextColor: '#000000',\n\t\t\t\t\t\tisEditing: true\n\t\t\t\t\t};\n\t\t\t\t\tthis.colorPreferences.push(newPref);\n\t\t\t\t},\n\n\t\t\t\teditColorPreference(id) {\n\t\t\t\t\tconst pref = this.colorPreferences.find(p => p.id === id);\n\t\t\t\t\tif (pref) {\n\t\t\t\t\t\tpref.isEditing = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tcancelEditColorPreference(id) {\n\t\t\t\t\tconst index = this.colorPreferences.findIndex(p => p.id === id);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tconst pref = this.colorPreferences[index];\n\t\t\t\t\t\tif (!pref.labelKey && !pref.labelValue) {\n\t\t\t\t\t\t\t// Remove if it's a new preference being cancelled\n\t\t\t\t\t\t\tthis.colorPreferences.splice(index, 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpref.isEditing = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tasync saveColorPreference(id) {\n\t\t\t\t\tconst pref = this.colorPreferences.find(p => p.id === id);\n\t\t\t\t\tif (!pref || !pref.labelKey.trim() || !pref.labelValue.trim()) {\n\t\t\t\t\t\tconsole.warn('Cannot save color preference: missing required fields');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst method = pref.serverId ? 'PUT' : 'POST';\n\t\t\t\t\t\tconst url = pref.serverId \n\t\t\t\t\t\t\t? `/api/v1/dashboard/color-preferences/${pref.serverId}`\n\t\t\t\t\t\t\t: '/api/v1/dashboard/color-preferences';\n\n\t\t\t\t\t\tconst response = await fetch(url, {\n\t\t\t\t\t\t\tmethod: method,\n\t\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\tlabelKey: pref.labelKey.trim(),\n\t\t\t\t\t\t\t\tlabelValue: pref.labelValue.trim(),\n\t\t\t\t\t\t\t\tbgColor: pref.bgColor,\n\t\t\t\t\t\t\t\ttextColor: pref.textColor\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\t\t// Update the preference with server data\n\t\t\t\t\t\t\tif (result.data && result.data.id) {\n\t\t\t\t\t\t\t\tpref.serverId = result.data.id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpref.isEditing = false;\n\t\t\t\t\t\t\tconsole.log('Color preference saved successfully');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Trigger alert color refresh in dashboard\n\t\t\t\t\t\t\tif (window.dashboardInstance && typeof window.dashboardInstance.refreshAlertColors === 'function') {\n\t\t\t\t\t\t\t\tconsole.log('Triggering dashboard alert color refresh...');\n\t\t\t\t\t\t\t\tawait window.dashboardInstance.refreshAlertColors();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error('Failed to save color preference:', result.error);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error saving color preference:', error);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tasync deleteColorPreference(id) {\n\t\t\t\t\tif (!confirm('Are you sure you want to delete this color preference?')) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst index = this.colorPreferences.findIndex(p => p.id === id);\n\t\t\t\t\tif (index === -1) return;\n\n\t\t\t\t\tconst pref = this.colorPreferences[index];\n\t\t\t\t\t\n\t\t\t\t\t// If it has a server ID, delete from server\n\t\t\t\t\tif (pref.serverId) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await fetch(`/api/v1/dashboard/color-preferences/${pref.serverId}`, {\n\t\t\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\t\t\tconsole.error('Failed to delete color preference from server:', result.error);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error('Error deleting color preference:', error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove from local array\n\t\t\t\t\tthis.colorPreferences.splice(index, 1);\n\t\t\t\t\tconsole.log('Color preference deleted successfully');\n\t\t\t\t\t\n\t\t\t\t\t// Trigger alert color refresh in dashboard\n\t\t\t\t\tif (window.dashboardInstance && typeof window.dashboardInstance.refreshAlertColors === 'function') {\n\t\t\t\t\t\tconsole.log('Triggering dashboard alert color refresh after deletion...');\n\t\t\t\t\t\tawait window.dashboardInstance.refreshAlertColors();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Get available values for a selected label key\n\t\t\t\tgetAvailableValuesForLabel(labelKey) {\n\t\t\t\t\treturn this.availableLabels[labelKey] || [];\n\t\t\t\t},\n\n\t\t\t\t// Preview the color combination\n\t\t\t\tgetPreviewStyle(pref) {\n\t\t\t\t\treturn `background-color: ${pref.bgColor}; color: ${pref.textColor}; padding: 2px 8px; border-radius: 4px; display: inline-block; min-width: 60px; text-align: center;`;\n\t\t\t\t},\n\n\t\t\t\t// Tab management\n\t\t\t\tsetActiveTab(tab) {\n\t\t\t\t\tthis.activeTab = tab;\n\t\t\t\t\tif (tab === 'colors') {\n\t\t\t\t\t\t// Refresh available labels when opening colors tab\n\t\t\t\t\t\tthis.loadAvailableLabels();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Form validation\n\t\t\t\tisValidColorPreference(pref) {\n\t\t\t\t\treturn pref.labelKey.trim() && pref.labelValue.trim() && pref.bgColor && pref.textColor;\n\t\t\t\t},\n\n\t\t\t\t// Check if a color preference has unsaved changes\n\t\t\t\thasUnsavedChanges(pref) {\n\t\t\t\t\treturn pref.isEditing;\n\t\t\t\t},\n\n\t\t\t\t// Color utility functions\n\t\t\t\tgenerateRandomColor() {\n\t\t\t\t\tconst colors = [\n\t\t\t\t\t\t'#ff9999', '#99ff99', '#9999ff', '#ffff99', '#ff99ff', '#99ffff',\n\t\t\t\t\t\t'#ffcc99', '#cc99ff', '#99ffcc', '#ccff99', '#ff99cc', '#99ccff'\n\t\t\t\t\t];\n\t\t\t\t\treturn colors[Math.floor(Math.random() * colors.length)];\n\t\t\t\t},\n\n\t\t\t\t// Get contrasting text color for background\n\t\t\t\tgetContrastingTextColor(bgColor) {\n\t\t\t\t\t// Simple contrast calculation - convert hex to RGB and check luminance\n\t\t\t\t\tconst hex = bgColor.replace('#', '');\n\t\t\t\t\tconst r = parseInt(hex.substr(0, 2), 16);\n\t\t\t\t\tconst g = parseInt(hex.substr(2, 2), 16);\n\t\t\t\t\tconst b = parseInt(hex.substr(4, 2), 16);\n\t\t\t\t\t\n\t\t\t\t\t// Calculate luminance\n\t\t\t\t\tconst luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n\t\t\t\t\t\n\t\t\t\t\treturn luminance > 0.5 ? '#000000' : '#ffffff';\n\t\t\t\t},\n\n\t\t\t\t// Auto-set contrasting text color when background changes\n\t\t\t\tonBgColorChange(pref) {\n\t\t\t\t\tpref.textColor = this.getContrastingTextColor(pref.bgColor);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Global settings modal reference for dashboard integration\n\t\twindow.settingsModalData = settingsModalData;\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
