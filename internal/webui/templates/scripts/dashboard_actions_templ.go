// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DashboardActions() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\twindow.dashboardActionsMixin = {\n\t\t\tcancelAcknowledgment() {\n\t\t\t\tthis.showAckModal = false;\n\t\t\t\tthis.ackReason = '';\n\t\t\t\tthis.ackError = '';\n\t\t\t\tthis.ackSubmitting = false;\n\t\t\t\tthis.currentAckAlert = null;\n\t\t\t\tthis.currentGroupName = '';\n\t\t\t},\n\t\t\t\n\t\t\tasync submitAcknowledgment() {\n\t\t\t\tif (!this.ackReason.trim()) {\n\t\t\t\t\tthis.ackError = 'Please provide a reason for the acknowledgment';\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.ackSubmitting = true;\n\t\t\t\tthis.ackError = '';\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tlet request;\n\t\t\t\t\tlet successMessage;\n\t\t\t\t\t\n\t\t\t\t\tswitch (this.ackAction) {\n\t\t\t\t\t\tcase 'single':\n\t\t\t\t\t\t\trequest = {\n\t\t\t\t\t\t\t\talertFingerprints: [this.currentAckAlert.fingerprint],\n\t\t\t\t\t\t\t\tgroupNames: [],\n\t\t\t\t\t\t\t\taction: 'acknowledge',\n\t\t\t\t\t\t\t\tcomment: this.ackReason\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsuccessMessage = 'Alert acknowledged successfully';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'group':\n\t\t\t\t\t\t\trequest = {\n\t\t\t\t\t\t\t\talertFingerprints: [],\n\t\t\t\t\t\t\t\tgroupNames: [this.currentGroupName],\n\t\t\t\t\t\t\t\taction: 'acknowledge',\n\t\t\t\t\t\t\t\tcomment: this.ackReason\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsuccessMessage = `Group \"${this.currentGroupName}\" acknowledged successfully`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'bulk':\n\t\t\t\t\t\t\trequest = {\n\t\t\t\t\t\t\t\talertFingerprints: this.selectedAlerts,\n\t\t\t\t\t\t\t\tgroupNames: this.selectedGroups,\n\t\t\t\t\t\t\t\taction: 'acknowledge',\n\t\t\t\t\t\t\t\tcomment: this.ackReason\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsuccessMessage = `${this.selectedAlerts.length + this.selectedGroups.length} items acknowledged successfully`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.ackError = 'Invalid acknowledgment action';\n\t\t\t\t\t\t\tthis.ackSubmitting = false;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', successMessage);\n\t\t\t\t\t\tthis.showAckModal = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.ackAction === 'bulk') {\n\t\t\t\t\t\t\tthis.clearSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.ackError = result.error || 'Failed to acknowledge';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error submitting acknowledgment:', error);\n\t\t\t\t\tthis.ackError = 'Network error: Failed to submit acknowledgment';\n\t\t\t\t} finally {\n\t\t\t\t\tthis.ackSubmitting = false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync hideSelected() {\n\t\t\t\tconst request = {\n\t\t\t\t\talertFingerprints: this.selectedAlerts,\n\t\t\t\t\tgroupNames: this.selectedGroups,\n\t\t\t\t\taction: 'hide'\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', `Hidden ${result.data.processedCount} alerts`);\n\t\t\t\t\t\tthis.clearSelection();\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to hide alerts: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error hiding alerts:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to hide alerts');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tacknowledgeAlert(fingerprint) {\n\t\t\t\tconst alert = this.alerts.find(a => a.fingerprint === fingerprint);\n\t\t\t\tthis.currentAckAlert = alert;\n\t\t\t\tthis.ackAction = 'single';\n\t\t\t\tthis.ackReason = '';\n\t\t\t\tthis.ackError = '';\n\t\t\t\tthis.showAckModal = true;\n\t\t\t},\n\n\t\t\tacknowledgeGroup(groupName) {\n\t\t\t\tthis.currentGroupName = groupName;\n\t\t\t\tthis.ackAction = 'group';\n\t\t\t\tthis.ackReason = '';\n\t\t\t\tthis.ackError = '';\n\t\t\t\tthis.showAckModal = true;\n\t\t\t},\n\n\t\t\tacknowledgeSelected() {\n\t\t\t\tif (this.selectedAlerts.length === 0 && this.selectedGroups.length === 0) {\n\t\t\t\t\tthis.showNotification('warning', 'Please select alerts or groups to acknowledge');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.ackAction = 'bulk';\n\t\t\t\tthis.ackReason = '';\n\t\t\t\tthis.ackError = '';\n\t\t\t\tthis.showAckModal = true;\n\t\t\t},\n\n\t\t\tasync hideAlert(fingerprint) {\n\t\t\t\tconst request = {\n\t\t\t\t\talertFingerprints: [fingerprint],\n\t\t\t\t\taction: 'hide'\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', 'Alert hidden');\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to hide alert: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error hiding alert:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to hide alert');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync unacknowledgeSelected() {\n\t\t\t\tconst request = {\n\t\t\t\t\talertFingerprints: this.selectedAlerts,\n\t\t\t\t\tgroupNames: this.selectedGroups,\n\t\t\t\t\taction: 'unacknowledge',\n\t\t\t\t\tcomment: 'Unacknowledged from dashboard'\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', `Unacknowledged ${result.data.processedCount} alerts`);\n\t\t\t\t\t\tthis.clearSelection();\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to unacknowledge alerts: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error unacknowledging alerts:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to unacknowledge alerts');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync unacknowledgeAlert(fingerprint) {\n\t\t\t\tconst request = {\n\t\t\t\t\talertFingerprints: [fingerprint],\n\t\t\t\t\taction: 'unacknowledge',\n\t\t\t\t\tcomment: 'Unacknowledged from dashboard'\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', 'Alert unacknowledged');\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to unacknowledge alert: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error unacknowledging alert:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to unacknowledge alert');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync resolveSelected() {\n\t\t\t\tconst request = {\n\t\t\t\t\talertFingerprints: this.selectedAlerts,\n\t\t\t\t\tgroupNames: this.selectedGroups,\n\t\t\t\t\taction: 'resolve',\n\t\t\t\t\tcomment: 'Resolved from dashboard'\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', `Resolved ${result.data.processedCount} alerts`);\n\t\t\t\t\t\tthis.clearSelection();\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to resolve alerts: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error resolving alerts:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to resolve alerts');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync resolveAlert(fingerprint) {\n\t\t\t\tconst request = {\n\t\t\t\t\talertFingerprints: [fingerprint],\n\t\t\t\t\taction: 'resolve',\n\t\t\t\t\tcomment: 'Resolved from dashboard'\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', 'Alert resolved');\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to resolve alert: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error resolving alert:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to resolve alert');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tconfirmRemoveResolvedAlerts() {\n\t\t\t\tif (confirm('Are you sure you want to remove all resolved alerts? This action cannot be undone.')) {\n\t\t\t\t\tthis.removeAllResolvedAlerts();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync removeAllResolvedAlerts() {\n\t\t\t\tthis.isRemovingResolvedAlerts = true;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/remove-resolved-alerts', {\n\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', 'All resolved alerts have been removed successfully');\n\t\t\t\t\t\tif (this.displayMode === 'resolved') {\n\t\t\t\t\t\t\tawait this.loadDashboardData();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', result.message || 'Failed to remove resolved alerts');\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error removing resolved alerts:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to remove resolved alerts');\n\t\t\t\t} finally {\n\t\t\t\t\tthis.isRemovingResolvedAlerts = false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcancelSilence() {\n\t\t\t\tthis.showSilenceModal = false;\n\t\t\t\tthis.silenceReason = '';\n\t\t\t\tthis.silenceError = '';\n\t\t\t\tthis.silenceSubmitting = false;\n\t\t\t\tthis.currentSilenceAlert = null;\n\t\t\t\tthis.currentGroupName = '';\n\t\t\t\tthis.silenceDuration = '1h';\n\t\t\t},\n\t\t\t\n\t\t\tasync submitSilence() {\n\t\t\t\tif (!this.silenceReason.trim()) {\n\t\t\t\t\tthis.silenceError = 'Please provide a reason for the silence';\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.silenceDurationType === 'custom') {\n\t\t\t\t\tif (!this.validateCustomDuration()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.silenceSubmitting = true;\n\t\t\t\tthis.silenceError = '';\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tlet request;\n\t\t\t\t\tlet successMessage;\n\t\t\t\t\t\n\t\t\t\t\tconst durationFields = {};\n\t\t\t\t\tif (this.silenceDurationType === 'custom') {\n\t\t\t\t\t\tdurationFields.silenceDurationType = 'custom';\n\t\t\t\t\t\tdurationFields.customSilenceDuration = this.customSilenceDuration.trim();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdurationFields.silenceDuration = this.parseDurationToSeconds(this.silenceDuration) * 1000000000;\n\t\t\t\t\t\tdurationFields.silenceDurationType = 'preset';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tswitch (this.silenceAction) {\n\t\t\t\t\t\tcase 'single':\n\t\t\t\t\t\t\trequest = {\n\t\t\t\t\t\t\t\talertFingerprints: [this.currentSilenceAlert.fingerprint],\n\t\t\t\t\t\t\t\tgroupNames: [],\n\t\t\t\t\t\t\t\taction: 'silence',\n\t\t\t\t\t\t\t\tcomment: this.silenceReason,\n\t\t\t\t\t\t\t\t...durationFields\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsuccessMessage = 'Alert silenced successfully';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'group':\n\t\t\t\t\t\t\trequest = {\n\t\t\t\t\t\t\t\talertFingerprints: [],\n\t\t\t\t\t\t\t\tgroupNames: [this.currentGroupName],\n\t\t\t\t\t\t\t\taction: 'silence',\n\t\t\t\t\t\t\t\tcomment: this.silenceReason,\n\t\t\t\t\t\t\t\t...durationFields\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsuccessMessage = `Group \"${this.currentGroupName}\" silenced successfully`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tcase 'bulk':\n\t\t\t\t\t\t\trequest = {\n\t\t\t\t\t\t\t\talertFingerprints: this.selectedAlerts,\n\t\t\t\t\t\t\t\tgroupNames: this.selectedGroups,\n\t\t\t\t\t\t\t\taction: 'silence',\n\t\t\t\t\t\t\t\tcomment: this.silenceReason,\n\t\t\t\t\t\t\t\t...durationFields\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsuccessMessage = `${this.selectedAlerts.length + this.selectedGroups.length} items silenced successfully`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis.silenceError = 'Invalid silence action';\n\t\t\t\t\t\t\tthis.silenceSubmitting = false;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', successMessage);\n\t\t\t\t\t\tthis.showSilenceModal = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.silenceAction === 'bulk') {\n\t\t\t\t\t\t\tthis.clearSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.silenceError = result.error || 'Failed to silence alert(s)';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error submitting silence:', error);\n\t\t\t\t\tthis.silenceError = 'Network error: Failed to submit silence';\n\t\t\t\t} finally {\n\t\t\t\t\tthis.silenceSubmitting = false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tparseDurationToSeconds(duration) {\n\t\t\t\tif (!duration) return 0;\n\t\t\t\t\n\t\t\t\tif (duration.match(/^\\d+[hd]$/)) {\n\t\t\t\t\tconst value = parseInt(duration.slice(0, -1));\n\t\t\t\t\tconst unit = duration.slice(-1);\n\t\t\t\t\t\n\t\t\t\t\tswitch (unit) {\n\t\t\t\t\t\tcase 'h':\n\t\t\t\t\t\t\treturn value * 3600;\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn value * 86400;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn value * 3600;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn this.parseComplexDurationToSeconds(duration);\n\t\t\t},\n\t\t\t\n\t\t\tparseComplexDurationToSeconds(duration) {\n\t\t\t\tif (!duration) return 0;\n\t\t\t\t\n\t\t\t\tlet totalSeconds = 0;\n\t\t\t\tconst units = {\n\t\t\t\t\t'ns': 0.000000001,\n\t\t\t\t\t'µs': 0.000001,\n\t\t\t\t\t'us': 0.000001,\n\t\t\t\t\t'ms': 0.001,\n\t\t\t\t\t's': 1,\n\t\t\t\t\t'm': 60,\n\t\t\t\t\t'h': 3600\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tconst regex = /(\\d+(?:\\.\\d+)?)(ns|µs|us|ms|s|m|h)/g;\n\t\t\t\tlet match;\n\t\t\t\t\n\t\t\t\twhile ((match = regex.exec(duration)) !== null) {\n\t\t\t\t\tconst value = parseFloat(match[1]);\n\t\t\t\t\tconst unit = match[2];\n\t\t\t\t\t\n\t\t\t\t\tif (units[unit]) {\n\t\t\t\t\t\ttotalSeconds += value * units[unit];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn Math.round(totalSeconds);\n\t\t\t},\n\t\t\t\n\t\t\tvalidateCustomDuration() {\n\t\t\t\tif (this.silenceDurationType !== 'custom' || !this.customSilenceDuration) {\n\t\t\t\t\tthis.customDurationError = '';\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst duration = this.customSilenceDuration.trim();\n\t\t\t\t\n\t\t\t\tif (!duration) {\n\t\t\t\t\tthis.customDurationError = 'Duration cannot be empty';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst validFormat = /^(\\d+(?:\\.\\d+)?)(ns|µs|us|ms|s|m|h)(\\d+(?:\\.\\d+)?(ns|µs|us|ms|s|m|h))*$/;\n\t\t\t\tif (!validFormat.test(duration)) {\n\t\t\t\t\tthis.customDurationError = 'Invalid format. Use combinations like 1h30m, 2h15m30s';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst totalSeconds = this.parseComplexDurationToSeconds(duration);\n\t\t\t\t\n\t\t\t\tif (totalSeconds <= 0) {\n\t\t\t\t\tthis.customDurationError = 'Duration must be positive';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (totalSeconds < 1) {\n\t\t\t\t\tthis.customDurationError = 'Duration must be at least 1 second';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst maxSeconds = 30 * 24 * 3600;\n\t\t\t\tif (totalSeconds > maxSeconds) {\n\t\t\t\t\tthis.customDurationError = 'Duration cannot exceed 30 days';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.customDurationError = '';\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tsilenceAlert(fingerprint) {\n\t\t\t\tconst alert = this.alerts.find(a => a.fingerprint === fingerprint);\n\t\t\t\tthis.currentSilenceAlert = alert;\n\t\t\t\tthis.silenceAction = 'single';\n\t\t\t\tthis.silenceReason = '';\n\t\t\t\tthis.silenceError = '';\n\t\t\t\tthis.silenceDuration = '1h';\n\t\t\t\tthis.silenceDurationType = 'preset';\n\t\t\t\tthis.customSilenceDuration = '';\n\t\t\t\tthis.customDurationError = '';\n\t\t\t\tthis.showSilenceModal = true;\n\t\t\t},\n\n\t\t\tsilenceGroup(groupName) {\n\t\t\t\tthis.currentGroupName = groupName;\n\t\t\t\tthis.silenceAction = 'group';\n\t\t\t\tthis.silenceReason = '';\n\t\t\t\tthis.silenceError = '';\n\t\t\t\tthis.silenceDuration = '1h';\n\t\t\t\tthis.silenceDurationType = 'preset';\n\t\t\t\tthis.customSilenceDuration = '';\n\t\t\t\tthis.customDurationError = '';\n\t\t\t\tthis.showSilenceModal = true;\n\t\t\t},\n\n\t\t\tsilenceSelected() {\n\t\t\t\tif (this.selectedAlerts.length === 0 && this.selectedGroups.length === 0) {\n\t\t\t\t\tthis.showNotification('warning', 'Please select alerts or groups to silence');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.silenceAction = 'bulk';\n\t\t\t\tthis.silenceReason = '';\n\t\t\t\tthis.silenceError = '';\n\t\t\t\tthis.silenceDuration = '1h';\n\t\t\t\tthis.silenceDurationType = 'preset';\n\t\t\t\tthis.customSilenceDuration = '';\n\t\t\t\tthis.customDurationError = '';\n\t\t\t\tthis.showSilenceModal = true;\n\t\t\t},\n\n\t\t\tasync unsilenceSelected() {\n\t\t\t\tif (this.selectedAlerts.length === 0 && this.selectedGroups.length === 0) {\n\t\t\t\t\tthis.showNotification('warning', 'Please select alerts or groups to unsilence');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst request = {\n\t\t\t\t\t\talertFingerprints: this.selectedAlerts,\n\t\t\t\t\t\tgroupNames: this.selectedGroups,\n\t\t\t\t\t\taction: 'unsilence',\n\t\t\t\t\t\tcomment: 'Bulk unsilence action'\n\t\t\t\t\t};\n\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify(request)\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', `${this.selectedAlerts.length + this.selectedGroups.length} items unsilenced successfully`);\n\t\t\t\t\t\tthis.clearSelection();\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to unsilence: ' + (result.error || 'Unknown error'));\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error unsilencing selected items:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to unsilence selected items');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tisAlertSilenced(alert) {\n\t\t\t\tif (!alert) return false;\n\t\t\t\treturn alert.status?.state === 'suppressed' || \n\t\t\t\t\t   alert.status?.state === 'silenced' || \n\t\t\t\t\t   (alert.status?.silencedBy && alert.status.silencedBy.length > 0);\n\t\t\t},\n\n\t\t\thasUnsilencedAlertsSelected() {\n\t\t\t\treturn this.selectedAlerts.some(fingerprint => {\n\t\t\t\t\tconst alert = this.alerts.find(a => a.fingerprint === fingerprint);\n\t\t\t\t\treturn alert && !this.isAlertSilenced(alert);\n\t\t\t\t});\n\t\t\t},\n\n\t\t\thasSilencedAlertsSelected() {\n\t\t\t\treturn this.selectedAlerts.some(fingerprint => {\n\t\t\t\t\tconst alert = this.alerts.find(a => a.fingerprint === fingerprint);\n\t\t\t\t\treturn alert && this.isAlertSilenced(alert);\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tisGroupFullySilenced(group) {\n\t\t\t\tif (!group || !group.alerts) return false;\n\t\t\t\treturn group.alerts.every(alert => this.isAlertSilenced(alert));\n\t\t\t},\n\n\t\t\tasync unsilenceAlert(fingerprint) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\taction: 'unsilence',\n\t\t\t\t\t\t\talertFingerprints: [fingerprint],\n\t\t\t\t\t\t\tcomment: 'Unsilenced from table action'\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', 'Alert unsilenced successfully');\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to unsilence alert: ' + (result.error || 'Unknown error'));\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error unsilencing alert:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to unsilence alert');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync unsilenceGroup(groupName) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/v1/dashboard/bulk-action', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\taction: 'unsilence',\n\t\t\t\t\t\t\tgroupNames: [groupName],\n\t\t\t\t\t\t\tcomment: 'Unsilenced group action'\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', `Group \"${groupName}\" unsilenced successfully`);\n\t\t\t\t\t\tthis.loadDashboardData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to unsilence group: ' + (result.error || 'Unknown error'));\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error unsilencing group:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to unsilence group');\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
