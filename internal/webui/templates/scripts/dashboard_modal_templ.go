// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DashboardModal() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\twindow.dashboardModalMixin = {\n\t\t\tasync showAlertDetails(fingerprint) {\n\t\t\t\tthis.alertDetailsLoading = true;\n\t\t\t\tthis.loading = true; // Sync loading state for injected content\n\t\t\t\tthis.showAlertModal = true;\n\t\t\t\tthis.currentAlertFingerprint = fingerprint;\n\t\t\t\t\n\t\t\t\t// Initialize variables needed by injected content\n\t\t\t\tthis.alertId = fingerprint;\n\t\t\t\tthis.error = null;\n\t\t\t\tthis.currentTab = 'overview';\n\t\t\t\tthis.alertDetails = null; // Clear previous data\n\n\t\t\t\tconst currentPath = window.location.pathname;\n\t\t\t\tconst newPath = `/dashboard/alert/${fingerprint}`;\n\t\t\t\tif (currentPath !== newPath) {\n\t\t\t\t\twindow.history.pushState({ alertId: fingerprint }, '', newPath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Fetch the standalone alert page HTML content\n\t\t\t\t\tconsole.log(`Fetching alert content from: /alert/${fingerprint}`);\n\t\t\t\t\tconst response = await fetch(`/alert/${fingerprint}`, {\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Accept': 'text/html',\n\t\t\t\t\t\t\t'Cache-Control': 'no-cache'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tconsole.log(`Response status: ${response.status}, headers:`, response.headers);\n\t\t\t\t\t\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst htmlContent = await response.text();\n\t\t\t\t\t\tconsole.log('Fetched HTML content length:', htmlContent.length);\n\t\t\t\t\t\tconsole.log('HTML content preview:', htmlContent.substring(0, 500));\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Parse the HTML and extract the content we need\n\t\t\t\t\t\tconst tempDiv = document.createElement('div');\n\t\t\t\t\t\ttempDiv.innerHTML = htmlContent;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('Parsed DOM structure:', tempDiv);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try multiple selectors to find the Alpine.js content\n\t\t\t\t\t\tlet mainContent = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try exact match first\n\t\t\t\t\t\tmainContent = tempDiv.querySelector('[x-data=\"alertDetailsStandalone()\"]');\n\t\t\t\t\t\tconsole.log('Exact match result:', mainContent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try contains match if exact fails\n\t\t\t\t\t\tif (!mainContent) {\n\t\t\t\t\t\t\tmainContent = tempDiv.querySelector('[x-data*=\"alertDetailsStandalone\"]');\n\t\t\t\t\t\t\tconsole.log('Contains match result:', mainContent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try finding by class if selector fails\n\t\t\t\t\t\tif (!mainContent) {\n\t\t\t\t\t\t\tmainContent = tempDiv.querySelector('.min-h-screen');\n\t\t\t\t\t\t\tconsole.log('Class-based match result:', mainContent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (mainContent) {\n\t\t\t\t\t\t\tconsole.log('Found main content element:', mainContent);\n\t\t\t\t\t\t\tconsole.log('Element attributes:', mainContent.attributes);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Clone the content and remove navigation elements that don't belong in modal\n\t\t\t\t\t\t\tconst contentClone = mainContent.cloneNode(true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Remove the header section with navigation buttons\n\t\t\t\t\t\t\tconst header = contentClone.querySelector('header');\n\t\t\t\t\t\t\tif (header) {\n\t\t\t\t\t\t\t\theader.remove();\n\t\t\t\t\t\t\t\tconsole.log('Removed header navigation from modal content');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Get the cleaned inner content\n\t\t\t\t\t\t\tconst innerContent = contentClone.innerHTML;\n\t\t\t\t\t\t\tconsole.log('Extracted inner content length:', innerContent.length);\n\t\t\t\t\t\t\tconsole.log('Inner content preview:', innerContent.substring(0, 300));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Insert the content into the modal\n\t\t\t\t\t\t\tconst modalContent = document.getElementById('modal-alert-content');\n\t\t\t\t\t\t\tconsole.log('Modal content container:', modalContent);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (modalContent) {\n\t\t\t\t\t\t\t\tmodalContent.innerHTML = innerContent;\n\t\t\t\t\t\t\t\tconsole.log('Content injected into modal');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Load alert data for the injected content\n\t\t\t\t\t\t\t\tawait this.loadAlertDataForModal(fingerprint);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Reinitialize Alpine.js for the new content\n\t\t\t\t\t\t\t\tif (window.Alpine) {\n\t\t\t\t\t\t\t\t\tconsole.log('Reinitializing Alpine.js for modal content');\n\t\t\t\t\t\t\t\t\twindow.Alpine.initTree(modalContent);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconsole.warn('Alpine.js not available');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error('Modal content container not found');\n\t\t\t\t\t\t\t\tthis.error = 'Modal container not found';\n\t\t\t\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error('Could not find alert content in fetched HTML');\n\t\t\t\t\t\t\tconsole.log('Available elements with x-data:', tempDiv.querySelectorAll('[x-data]'));\n\t\t\t\t\t\t\tthis.error = 'Failed to parse alert content';\n\t\t\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Check if it's a redirect to login\n\t\t\t\t\t\tif (response.status === 302 || response.url?.includes('/login')) {\n\t\t\t\t\t\t\tthis.error = 'Authentication required. Please refresh the page and try again.';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.error = `Failed to load alert details: HTTP ${response.status}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.error('Failed to fetch alert content:', response.status, response.statusText);\n\t\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error loading alert details:', error);\n\t\t\t\t\tthis.error = 'Failed to load alert details';\n\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t} finally {\n\t\t\t\t\tthis.alertDetailsLoading = false;\n\t\t\t\t\tthis.loading = false; // Sync loading state for injected content\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcloseAlertModal() {\n\t\t\t\tthis.showAlertModal = false;\n\t\t\t\tthis.currentAlertFingerprint = null;\n\t\t\t\t\n\t\t\t\t// Clear variables used by injected content\n\t\t\t\tthis.alertId = null;\n\t\t\t\tthis.error = null;\n\t\t\t\tthis.currentTab = 'overview';\n\t\t\t\tthis.loading = false;\n\t\t\t\tthis.alertDetails = null;\n\t\t\t\t\n\t\t\t\t// Clear the modal content\n\t\t\t\tconst modalContent = document.getElementById('modal-alert-content');\n\t\t\t\tif (modalContent) {\n\t\t\t\t\tmodalContent.innerHTML = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (window.location.pathname.includes('/alert/')) {\n\t\t\t\t\twindow.history.pushState({}, '', '/dashboard');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Load alert data via API for injected modal content\n\t\t\tasync loadAlertDataForModal(fingerprint) {\n\t\t\t\tconsole.log(`Loading alert data for modal: ${fingerprint}`);\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/v1/dashboard/alert/${fingerprint}`, {\n\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\tconsole.log('Alert data API response:', result);\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.alertDetails = result.data;\n\t\t\t\t\t\tconsole.log('Set alertDetails for injected content:', this.alertDetails);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('Failed to load alert data:', result.error);\n\t\t\t\t\t\tthis.error = result.error || 'Failed to load alert data';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error loading alert data for modal:', error);\n\t\t\t\t\tthis.error = 'Network error loading alert data';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// NOTE: All alert action functions (acknowledge, silence, comments, etc.) are now handled\n\t\t\t// by the standalone alert page that gets loaded into this modal. This provides a single\n\t\t\t// source of truth and eliminates code duplication.\n\t\t};\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
