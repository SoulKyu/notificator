// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DashboardModal() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\twindow.dashboardModalMixin = {\n\t\t\t// Auto-refresh for modal\n\t\t\tmodalRefreshInterval: null,\n\t\t\tmodalRefreshRate: 5000, // 5 seconds\n\t\t\t\n\t\t\t// Modal resizing\n\t\t\tmodalSize: { width: 1200, height: 700 },\n\t\t\tdefaultModalSize: { width: 1200, height: 700 },\n\t\t\tisResizing: false,\n\t\t\tresizeStartPos: { x: 0, y: 0 },\n\t\t\tresizeStartSize: { width: 0, height: 0 },\n\n\t\t\tasync showAlertDetails(fingerprint) {\n\t\t\t\tthis.alertDetailsLoading = true;\n\t\t\t\tthis.loading = true; // Sync loading state for injected content\n\t\t\t\tthis.showAlertModal = true;\n\t\t\t\tthis.currentAlertFingerprint = fingerprint;\n\t\t\t\t\n\t\t\t\t// Initialize variables needed by injected content\n\t\t\t\tthis.alertId = fingerprint;\n\t\t\t\tthis.error = null;\n\t\t\t\tthis.currentTab = 'overview';\n\t\t\t\tthis.alertDetails = null; // Clear previous data\n\t\t\t\t\n\t\t\t\t// Initialize modal resize functionality\n\t\t\t\tthis.initModalResize();\n\t\t\t\t\n\t\t\t\t// Start auto-refresh for modal\n\t\t\t\tthis.startModalAutoRefresh();\n\t\t\t\t\n\t\t\t\t// Apply modal size after a brief delay to ensure modal is rendered\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.applyModalSize();\n\t\t\t\t}, 100);\n\n\t\t\t\t// Preserve query parameters when updating URL\n\t\t\t\tconst currentPath = window.location.pathname;\n\t\t\t\tconst currentQuery = window.location.search;\n\t\t\t\tconst newPath = `/dashboard/alert/${fingerprint}${currentQuery}`;\n\t\t\t\tif (currentPath !== newPath.split('?')[0]) {\n\t\t\t\t\twindow.history.pushState({ alertId: fingerprint }, '', newPath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Fetch the standalone alert page HTML content\n\t\t\t\t\tconsole.log(`Fetching alert content from: /alert/${fingerprint}`);\n\t\t\t\t\tconst response = await fetch(`/alert/${fingerprint}`, {\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Accept': 'text/html',\n\t\t\t\t\t\t\t'Cache-Control': 'no-cache'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tconsole.log(`Response status: ${response.status}, headers:`, response.headers);\n\t\t\t\t\t\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst htmlContent = await response.text();\n\t\t\t\t\t\tconsole.log('Fetched HTML content length:', htmlContent.length);\n\t\t\t\t\t\tconsole.log('HTML content preview:', htmlContent.substring(0, 500));\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Parse the HTML and extract the content we need\n\t\t\t\t\t\tconst tempDiv = document.createElement('div');\n\t\t\t\t\t\ttempDiv.innerHTML = htmlContent;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('Parsed DOM structure:', tempDiv);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try multiple selectors to find the Alpine.js content\n\t\t\t\t\t\tlet mainContent = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try exact match first\n\t\t\t\t\t\tmainContent = tempDiv.querySelector('[x-data=\"alertDetailsStandalone()\"]');\n\t\t\t\t\t\tconsole.log('Exact match result:', mainContent);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try contains match if exact fails\n\t\t\t\t\t\tif (!mainContent) {\n\t\t\t\t\t\t\tmainContent = tempDiv.querySelector('[x-data*=\"alertDetailsStandalone\"]');\n\t\t\t\t\t\t\tconsole.log('Contains match result:', mainContent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Try finding by class if selector fails\n\t\t\t\t\t\tif (!mainContent) {\n\t\t\t\t\t\t\tmainContent = tempDiv.querySelector('.min-h-screen');\n\t\t\t\t\t\t\tconsole.log('Class-based match result:', mainContent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (mainContent) {\n\t\t\t\t\t\t\tconsole.log('Found main content element:', mainContent);\n\t\t\t\t\t\t\tconsole.log('Element attributes:', mainContent.attributes);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Clone the content and remove navigation elements that don't belong in modal\n\t\t\t\t\t\t\tconst contentClone = mainContent.cloneNode(true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Remove the header section with navigation buttons\n\t\t\t\t\t\t\tconst header = contentClone.querySelector('header');\n\t\t\t\t\t\t\tif (header) {\n\t\t\t\t\t\t\t\theader.remove();\n\t\t\t\t\t\t\t\tconsole.log('Removed header navigation from modal content');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Get the cleaned inner content\n\t\t\t\t\t\t\tconst innerContent = contentClone.innerHTML;\n\t\t\t\t\t\t\tconsole.log('Extracted inner content length:', innerContent.length);\n\t\t\t\t\t\t\tconsole.log('Inner content preview:', innerContent.substring(0, 300));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Insert the content into the modal\n\t\t\t\t\t\t\tconst modalContent = document.getElementById('modal-alert-content');\n\t\t\t\t\t\t\tconsole.log('Modal content container:', modalContent);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (modalContent) {\n\t\t\t\t\t\t\t\tmodalContent.innerHTML = innerContent;\n\t\t\t\t\t\t\t\tconsole.log('Content injected into modal');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Load alert data for the injected content\n\t\t\t\t\t\t\t\tawait this.loadAlertDataForModal(fingerprint);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Reinitialize Alpine.js for the new content\n\t\t\t\t\t\t\t\tif (window.Alpine) {\n\t\t\t\t\t\t\t\t\tconsole.log('Reinitializing Alpine.js for modal content');\n\t\t\t\t\t\t\t\t\twindow.Alpine.initTree(modalContent);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconsole.warn('Alpine.js not available');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error('Modal content container not found');\n\t\t\t\t\t\t\t\tthis.error = 'Modal container not found';\n\t\t\t\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error('Could not find alert content in fetched HTML');\n\t\t\t\t\t\t\tconsole.log('Available elements with x-data:', tempDiv.querySelectorAll('[x-data]'));\n\t\t\t\t\t\t\tthis.error = 'Failed to parse alert content';\n\t\t\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Check if it's a redirect to login\n\t\t\t\t\t\tif (response.status === 302 || response.url?.includes('/login')) {\n\t\t\t\t\t\t\tthis.error = 'Authentication required. Please refresh the page and try again.';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.error = `Failed to load alert details: HTTP ${response.status}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.error('Failed to fetch alert content:', response.status, response.statusText);\n\t\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error loading alert details:', error);\n\t\t\t\t\tthis.error = 'Failed to load alert details';\n\t\t\t\t\tthis.showNotification('error', this.error);\n\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t} finally {\n\t\t\t\t\tthis.alertDetailsLoading = false;\n\t\t\t\t\tthis.loading = false; // Sync loading state for injected content\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcloseAlertModal() {\n\t\t\t\tthis.showAlertModal = false;\n\t\t\t\tthis.currentAlertFingerprint = null;\n\t\t\t\t\n\t\t\t\t// Stop auto-refresh\n\t\t\t\tthis.stopModalAutoRefresh();\n\t\t\t\t\n\t\t\t\t// Clear variables used by injected content\n\t\t\t\tthis.alertId = null;\n\t\t\t\tthis.error = null;\n\t\t\t\tthis.currentTab = 'overview';\n\t\t\t\tthis.loading = false;\n\t\t\t\tthis.alertDetails = null;\n\t\t\t\t\n\t\t\t\t// Clear the modal content\n\t\t\t\tconst modalContent = document.getElementById('modal-alert-content');\n\t\t\t\tif (modalContent) {\n\t\t\t\t\tmodalContent.innerHTML = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Preserve query parameters when closing modal\n\t\t\t\tif (window.location.pathname.includes('/alert/')) {\n\t\t\t\t\tconst currentQuery = window.location.search;\n\t\t\t\t\twindow.history.pushState({}, '', `/dashboard${currentQuery}`);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tstartModalAutoRefresh() {\n\t\t\t\tthis.stopModalAutoRefresh(); // Clear any existing interval\n\t\t\t\tthis.modalRefreshInterval = setInterval(() => {\n\t\t\t\t\tif (this.showAlertModal && this.currentAlertFingerprint && !this.loading && !document.hidden) {\n\t\t\t\t\t\tthis.refreshModalAlertDetails();\n\t\t\t\t\t}\n\t\t\t\t}, this.modalRefreshRate);\n\t\t\t},\n\n\t\t\tstopModalAutoRefresh() {\n\t\t\t\tif (this.modalRefreshInterval) {\n\t\t\t\t\tclearInterval(this.modalRefreshInterval);\n\t\t\t\t\tthis.modalRefreshInterval = null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync refreshModalAlertDetails() {\n\t\t\t\tif (!this.currentAlertFingerprint) return;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t// If using injected content, let the injected page handle its own refresh\n\t\t\t\t\tif (this.currentAlertFingerprint) {\n\t\t\t\t\t\t// Find the injected Alpine.js instance and trigger refresh if it exists\n\t\t\t\t\t\tconst modalContent = document.getElementById('modal-alert-content');\n\t\t\t\t\t\tif (modalContent && modalContent._x_dataStack) {\n\t\t\t\t\t\t\tconst alertInstance = modalContent._x_dataStack[0];\n\t\t\t\t\t\t\tif (alertInstance && typeof alertInstance.refreshAlertDetails === 'function') {\n\t\t\t\t\t\t\t\talertInstance.refreshAlertDetails();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Fallback: refresh data via API for legacy modal content\n\t\t\t\t\tawait this.loadAlertDataForModal(this.currentAlertFingerprint);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn('Modal auto-refresh failed:', error);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Load alert data via API for injected modal content\n\t\t\tasync loadAlertDataForModal(fingerprint) {\n\t\t\t\tconsole.log(`Loading alert data for modal: ${fingerprint}`);\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/v1/dashboard/alert/${fingerprint}`, {\n\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\tconsole.log('Alert data API response:', result);\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.alertDetails = result.data;\n\t\t\t\t\t\tconsole.log('Set alertDetails for injected content:', this.alertDetails);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('Failed to load alert data:', result.error);\n\t\t\t\t\t\tthis.error = result.error || 'Failed to load alert data';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error loading alert data for modal:', error);\n\t\t\t\t\tthis.error = 'Network error loading alert data';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Modal resizing functionality\n\t\t\tinitModalResize() {\n\t\t\t\t// Load saved modal size from localStorage\n\t\t\t\tconst savedSize = localStorage.getItem('modalSize');\n\t\t\t\tif (savedSize) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.modalSize = JSON.parse(savedSize);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn('Failed to parse saved modal size:', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Add global mouse event listeners\n\t\t\t\tdocument.addEventListener('mousemove', (e) => this.handleMouseMove(e));\n\t\t\t\tdocument.addEventListener('mouseup', () => this.stopResize());\n\t\t\t},\n\n\t\t\tstartResize(event) {\n\t\t\t\tthis.isResizing = true;\n\t\t\t\tthis.resizeStartPos = { x: event.clientX, y: event.clientY };\n\t\t\t\tthis.resizeStartSize = { width: this.modalSize.width, height: this.modalSize.height };\n\t\t\t\t\n\t\t\t\tevent.preventDefault();\n\t\t\t\tdocument.body.style.cursor = 'nw-resize';\n\t\t\t\tdocument.body.style.userSelect = 'none';\n\t\t\t},\n\n\t\t\thandleMouseMove(event) {\n\t\t\t\tif (!this.isResizing) return;\n\t\t\t\t\n\t\t\t\tconst deltaX = event.clientX - this.resizeStartPos.x;\n\t\t\t\tconst deltaY = event.clientY - this.resizeStartPos.y;\n\t\t\t\t\n\t\t\t\t// Calculate new size with minimum constraints\n\t\t\t\tconst newWidth = Math.max(400, Math.min(window.innerWidth - 40, this.resizeStartSize.width + deltaX));\n\t\t\t\tconst newHeight = Math.max(300, Math.min(window.innerHeight - 40, this.resizeStartSize.height + deltaY));\n\t\t\t\t\n\t\t\t\tthis.modalSize = { width: newWidth, height: newHeight };\n\t\t\t\tthis.applyModalSize();\n\t\t\t},\n\n\t\t\tstopResize() {\n\t\t\t\tif (this.isResizing) {\n\t\t\t\t\tthis.isResizing = false;\n\t\t\t\t\tdocument.body.style.cursor = '';\n\t\t\t\t\tdocument.body.style.userSelect = '';\n\t\t\t\t\t\n\t\t\t\t\t// Save modal size to localStorage\n\t\t\t\t\tlocalStorage.setItem('modalSize', JSON.stringify(this.modalSize));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tapplyModalSize() {\n\t\t\t\tconst modalPanel = document.querySelector('.alert-modal-panel');\n\t\t\t\tif (modalPanel) {\n\t\t\t\t\tmodalPanel.style.width = this.modalSize.width + 'px';\n\t\t\t\t\tmodalPanel.style.height = this.modalSize.height + 'px';\n\t\t\t\t\tmodalPanel.style.maxWidth = 'none';\n\t\t\t\t\tmodalPanel.style.maxHeight = 'none';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tresetModalSize() {\n\t\t\t\tthis.modalSize = { ...this.defaultModalSize };\n\t\t\t\tthis.applyModalSize();\n\t\t\t\tlocalStorage.removeItem('modalSize');\n\t\t\t},\n\n\t\t\t// NOTE: All alert action functions (acknowledge, silence, comments, etc.) are now handled\n\t\t\t// by the standalone alert page that gets loaded into this modal. This provides a single\n\t\t\t// source of truth and eliminates code duplication.\n\t\t};\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
