// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DashboardModal() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\t// Alert details modal and comment management for dashboard\n\t\twindow.dashboardModalMixin = {\n\t\t\t// Alert Details Modal Functions\n\t\t\tasync showAlertDetails(fingerprint) {\n\t\t\t\tthis.alertDetailsLoading = true;\n\t\t\t\tthis.showAlertModal = true;\n\t\t\t\tthis.currentAlertTab = 'overview';\n\t\t\t\tthis.alertDetails = null;\n\n\t\t\t\t// Update URL without page reload\n\t\t\t\tconst currentPath = window.location.pathname;\n\t\t\t\tconst newPath = `/dashboard/alert/${fingerprint}`;\n\t\t\t\tif (currentPath !== newPath) {\n\t\t\t\t\twindow.history.pushState({ alertId: fingerprint }, '', newPath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/v1/dashboard/alert/${fingerprint}`, {\n\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t});\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.alertDetails = result.data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to load alert details: ' + result.error);\n\t\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error loading alert details:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to load alert details');\n\t\t\t\t\tthis.closeAlertModal();\n\t\t\t\t} finally {\n\t\t\t\t\tthis.alertDetailsLoading = false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcloseAlertModal() {\n\t\t\t\tthis.showAlertModal = false;\n\t\t\t\tthis.alertDetails = null;\n\t\t\t\tthis.currentAlertTab = 'overview';\n\t\t\t\t\n\t\t\t\t// Reset comment state\n\t\t\t\tthis.newCommentContent = '';\n\t\t\t\tthis.commentSubmitting = false;\n\t\t\t\tthis.commentDeleting = {};\n\t\t\t\t\n\t\t\t\t// Update URL back to dashboard\n\t\t\t\tif (window.location.pathname.includes('/alert/')) {\n\t\t\t\t\twindow.history.pushState({}, '', '/dashboard');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tacknowledgeCurrentAlert() {\n\t\t\t\tif (this.alertDetails?.alert) {\n\t\t\t\t\tthis.currentAckAlert = this.alertDetails.alert;\n\t\t\t\t\tthis.ackAction = 'single';\n\t\t\t\t\tthis.ackReason = '';\n\t\t\t\t\tthis.ackError = '';\n\t\t\t\t\tthis.showAckModal = true;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Comment Management Functions\n\t\t\tasync addComment() {\n\t\t\t\tif (!this.newCommentContent.trim()) {\n\t\t\t\t\tthis.showNotification('warning', 'Please enter a comment');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.alertDetails?.alert?.fingerprint) {\n\t\t\t\t\tthis.showNotification('error', 'Alert information not available');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.commentSubmitting = true;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/v1/dashboard/alert/${this.alertDetails.alert.fingerprint}/comments`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tcontent: this.newCommentContent.trim()\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', 'Comment added successfully');\n\t\t\t\t\t\tthis.newCommentContent = '';\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Refresh alert details to show the new comment\n\t\t\t\t\t\tawait this.refreshComments();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to add comment: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error adding comment:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to add comment');\n\t\t\t\t} finally {\n\t\t\t\t\tthis.commentSubmitting = false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync deleteComment(commentId) {\n\t\t\t\tif (!commentId || !this.alertDetails?.alert?.fingerprint) {\n\t\t\t\t\tthis.showNotification('error', 'Comment information not available');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Set deleting state for this specific comment\n\t\t\t\tthis.commentDeleting[commentId] = true;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/v1/dashboard/alert/${this.alertDetails.alert.fingerprint}/comments/${commentId}`, {\n\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t});\n\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\tthis.showNotification('success', 'Comment deleted successfully');\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Refresh alert details to remove the deleted comment\n\t\t\t\t\t\tawait this.refreshComments();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showNotification('error', 'Failed to delete comment: ' + result.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error deleting comment:', error);\n\t\t\t\t\tthis.showNotification('error', 'Failed to delete comment');\n\t\t\t\t} finally {\n\t\t\t\t\t// Remove deleting state for this comment\n\t\t\t\t\tdelete this.commentDeleting[commentId];\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync refreshComments() {\n\t\t\t\tif (!this.alertDetails?.alert?.fingerprint) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/v1/dashboard/alert/${this.alertDetails.alert.fingerprint}`, {\n\t\t\t\t\t\tcredentials: 'include'\n\t\t\t\t\t});\n\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\n\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\t// Update only the comments and maintain other alert details\n\t\t\t\t\t\tthis.alertDetails.comments = result.data.comments || [];\n\t\t\t\t\t\t// Update comment count in alert object if it exists\n\t\t\t\t\t\tif (this.alertDetails.alert) {\n\t\t\t\t\t\t\tthis.alertDetails.alert.commentCount = this.alertDetails.comments.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error refreshing comments:', error);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
