package components

import "fmt"

type OAuthProvider struct {
	Name        string
	DisplayName string
	Enabled     bool
}

templ OAuthButton(provider OAuthProvider) {
	<button
		type="button"
		class="w-full flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
		onclick={ templ.ComponentScript{Call: fmt.Sprintf("handleOAuthLogin(this, '%s')", provider.Name)} }
		x-data="{ loading: false }"
		x-bind:disabled="loading"
		aria-label={ fmt.Sprintf("Continue with %s", provider.DisplayName) }
	>
		<div class="flex items-center">
			@OAuthProviderIcon(provider.Name)
			<span class="ml-2" x-show="!loading">Continue with { provider.DisplayName }</span>
			<span class="ml-2" x-show="loading">
				<svg class="animate-spin h-4 w-4 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
				Redirecting...
			</span>
		</div>
	</button>

	<script>
		/**
		 * Production-ready OAuth login handler
		 * @param {HTMLButtonElement} button - The OAuth button element
		 * @param {string} provider - OAuth provider name (e.g., 'github')
		 */
		async function handleOAuthLogin(button, provider) {
			// Validate inputs
			if (!button || !provider) {
				console.error('OAuth login: Invalid parameters', { button, provider });
				showError?.('OAuth configuration error');
				return;
			}

			// Get Alpine.js component for loading state
			const alpineData = button._x_dataStack?.[0];
			if (alpineData) {
				alpineData.loading = true;
			}

			// Disable button to prevent double-clicks
			button.disabled = true;

			try {
				console.log(`Initiating OAuth login for provider: ${provider}`);

				// Create abort controller for timeout
				const controller = new AbortController();
				const timeoutId = setTimeout(() => {
					controller.abort();
				}, 10000); // 10 second timeout

				// Make OAuth request
				const response = await fetch(`/api/v1/oauth/${encodeURIComponent(provider)}/login`, {
					method: 'GET',
					headers: {
						'Accept': 'application/json',
						'X-Requested-With': 'XMLHttpRequest'
					},
					credentials: 'same-origin',
					signal: controller.signal
				});

				clearTimeout(timeoutId);

				// Check if response is ok
				if (!response.ok) {
					throw new Error(`HTTP ${response.status}: ${response.statusText}`);
				}

				// Parse JSON response
				const contentType = response.headers.get('content-type');
				if (!contentType?.includes('application/json')) {
					throw new Error('Invalid response content type. Expected JSON.');
				}

				const data = await response.json();
				console.log('OAuth response received:', data);

				// Validate response structure
				if (!data || typeof data !== 'object') {
					throw new Error('Invalid response format');
				}

				if (!data.success) {
					throw new Error(data.error || 'OAuth login failed');
				}

				if (!data.data?.auth_url) {
					throw new Error('No authorization URL received');
				}

				// Validate auth URL
				const authUrl = data.data.auth_url;
				if (typeof authUrl !== 'string' || !authUrl.startsWith('https://')) {
					throw new Error('Invalid authorization URL');
				}

				console.log(`Redirecting to OAuth provider: ${authUrl}`);

				// Redirect to OAuth provider
				window.location.href = authUrl;

			} catch (error) {
				console.error('OAuth login failed:', error);

				// Categorize and handle different error types
				let userMessage = 'OAuth login failed. Please try again.';

				if (error.name === 'AbortError') {
					userMessage = 'OAuth login timed out. Please check your connection and try again.';
				} else if (error.name === 'TypeError' && error.message.includes('fetch')) {
					userMessage = 'Network error. Please check your connection and try again.';
				} else if (error.message.includes('HTTP')) {
					userMessage = 'OAuth service temporarily unavailable. Please try again later.';
				} else if (error.message.includes('JSON')) {
					userMessage = 'OAuth response error. Please contact support if this persists.';
				}

				// Show user-friendly error message
				if (typeof showError === 'function') {
					showError(userMessage);
				} else {
					// Fallback error display
					alert(userMessage);
				}

			} finally {
				// Reset loading state
				if (alpineData) {
					alpineData.loading = false;
				}
				button.disabled = false;
			}
		}
	</script>
}

templ OAuthProviderIcon(provider string) {
	switch provider {
		case "github":
			<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"></path>
			</svg>
		case "google":
			<svg class="w-5 h-5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
				<path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
				<path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
				<path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
			</svg>
		case "microsoft":
			<svg class="w-5 h-5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path fill="#f25022" d="M1 1h10v10H1z"/>
				<path fill="#00a4ef" d="M13 1h10v10H13z"/>
				<path fill="#7fba00" d="M1 13h10v10H1z"/>
				<path fill="#ffb900" d="M13 13h10v10H13z"/>
			</svg>
		default:
			<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path>
			</svg>
	}
}

templ OAuthProviderList(providers []OAuthProvider) {
	if len(providers) > 0 {
		<div class="space-y-3">
			<div class="relative">
				<div class="absolute inset-0 flex items-center">
					<div class="w-full border-t border-gray-300"></div>
				</div>
				<div class="relative flex justify-center text-sm">
					<span class="px-2 bg-white text-gray-500">Or continue with</span>
				</div>
			</div>
			<div class="space-y-2">
				for _, provider := range providers {
					if provider.Enabled {
						@OAuthButton(provider)
					}
				}
			</div>
		</div>
	}
}

templ OAuthUserGroups(groups []map[string]interface{}) {
	<div class="mt-6">
		<h3 class="text-lg font-medium text-gray-900 mb-4">Your Groups</h3>
		if len(groups) == 0 {
			<p class="text-sm text-gray-500">No groups found.</p>
		} else {
			<div class="space-y-2">
				for _, group := range groups {
					<div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								@OAuthProviderIcon(group["provider"].(string))
							</div>
							<div class="ml-3">
								<p class="text-sm font-medium text-gray-900">{ group["name"].(string) }</p>
								<p class="text-xs text-gray-500">
									{ group["provider"].(string) } · { group["type"].(string) }
									if role, ok := group["role"].(string); ok && role != "" {
										· { role }
									}
								</p>
							</div>
						</div>
						<div class="flex-shrink-0">
							<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
								Active
							</span>
						</div>
					</div>
				}
			</div>
			<div class="mt-4">
				<button
					type="button"
					class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
					hx-post="/api/v1/oauth/sync-groups"
					hx-trigger="click"
					hx-target="#groups-container"
					hx-swap="outerHTML"
					hx-indicator="#sync-loading"
				>
					<svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Sync Groups
				</button>
				<div id="sync-loading" class="htmx-indicator ml-2 inline-flex items-center">
					<svg class="animate-spin h-4 w-4 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
					<span class="ml-2 text-sm text-gray-600">Syncing...</span>
				</div>
			</div>
		}
	</div>
}