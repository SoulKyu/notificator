// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Base(title string, content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\" class=\"h-full\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/webui/templates/layouts/Base.templ`, Line: 9, Col: 16}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><link rel=\"icon\" type=\"image/png\" href=\"/static/notificator_background.png\"><link href=\"/static/css/output.css?v=1\" rel=\"stylesheet\"><script src=\"https://unpkg.com/htmx.org@2.0.4\"></script><script src=\"https://unpkg.com/alpinejs@3.14.6/dist/cdn.min.js\" defer></script></head><body class=\"h-full bg-gray-50 dark:bg-dark-bg-primary\"><div class=\"min-h-full\" x-data=\"darkModeHandler()\" x-init=\"init()\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div><!-- Dark mode toggle script --><script>\n\t\t\t// Global dark mode functions\n\t\t\twindow.darkModeState = {\n\t\t\t\tdarkMode: false,\n\t\t\t\tinit() {\n\t\t\t\t\t// Force light mode for now\n\t\t\t\t\tthis.darkMode = false;\n\t\t\t\t\tconsole.log('Dark mode disabled - forced to:', this.darkMode);\n\t\t\t\t\tthis.updateTheme();\n\t\t\t\t},\n\t\t\t\ttoggle() {\n\t\t\t\t\tthis.darkMode = !this.darkMode;\n\t\t\t\t\tconsole.log('Dark mode toggled to:', this.darkMode);\n\t\t\t\t\tlocalStorage.setItem('darkMode', this.darkMode.toString());\n\t\t\t\t\tconsole.log('Dark mode saved to localStorage:', localStorage.getItem('darkMode'));\n\t\t\t\t\tthis.updateTheme();\n\t\t\t\t\t// Dispatch event to update all Alpine components\n\t\t\t\t\twindow.dispatchEvent(new CustomEvent('darkModeChanged', { detail: this.darkMode }));\n\t\t\t\t},\n\t\t\t\tupdateTheme() {\n\t\t\t\t\tconsole.log('Updating theme, darkMode:', this.darkMode);\n\t\t\t\t\tif (this.darkMode) {\n\t\t\t\t\t\tdocument.documentElement.classList.add('dark');\n\t\t\t\t\t\tconsole.log('Added dark class to documentElement');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdocument.documentElement.classList.remove('dark');\n\t\t\t\t\t\tconsole.log('Removed dark class from documentElement');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t// Initialize dark mode immediately (before page load)\n\t\t\twindow.darkModeState.init();\n\n\t\t\tfunction darkModeHandler() {\n\t\t\t\treturn {\n\t\t\t\t\tdarkMode: false,\n\t\t\t\t\tinit() {\n\t\t\t\t\t\t// Initialize from global state (without re-initializing global state)\n\t\t\t\t\t\tthis.darkMode = window.darkModeState.darkMode;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Listen for changes\n\t\t\t\t\t\twindow.addEventListener('darkModeChanged', (e) => {\n\t\t\t\t\t\t\tthis.darkMode = e.detail;\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\ttoggle() {\n\t\t\t\t\t\twindow.darkModeState.toggle();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
