// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "notificator/internal/webui/templates/layouts"
import "notificator/internal/webui/templates/components"

type OAuthConfig struct {
	Enabled            bool
	DisableClassicAuth bool
	Providers          []components.OAuthProvider
}

func Login() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = LoginWithOAuth(nil).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func LoginWithOAuth(oauthConfig *OAuthConfig) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = layouts.Base("Login - Notificator", LoginContent(oauthConfig)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func LoginContent(oauthConfig *OAuthConfig) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\"><div class=\"sm:mx-auto sm:w-full sm:max-w-sm\"><h2 class=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900 dark:text-white\">Sign in to Notificator</h2></div><div class=\"sm:mx-auto sm:w-full sm:max-w-sm\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.BackendWarning().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><div class=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\"><!-- OAuth Providers -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if oauthConfig != nil && oauthConfig.Enabled && len(oauthConfig.Providers) > 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"mb-6\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.OAuthProviderList(oauthConfig.Providers).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<!-- Classic Login Form (hidden if OAuth-only mode) -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if oauthConfig == nil || !oauthConfig.DisableClassicAuth {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<form class=\"space-y-6\" x-data=\"loginForm()\" @submit.prevent=\"submitForm\"><div><label for=\"username\" class=\"block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100\">Username</label><div class=\"mt-2\"><input id=\"username\" name=\"username\" type=\"text\" required x-model=\"form.username\" class=\"input-field\" :class=\"{ 'border-red-500': errors.username }\"></div><p x-show=\"errors.username\" class=\"mt-1 text-sm text-red-600\" x-text=\"errors.username\"></p></div><div><label for=\"password\" class=\"block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100\">Password</label><div class=\"mt-2\"><input id=\"password\" name=\"password\" type=\"password\" required x-model=\"form.password\" class=\"input-field\" :class=\"{ 'border-red-500': errors.password }\"></div><p x-show=\"errors.password\" class=\"mt-1 text-sm text-red-600\" x-text=\"errors.password\"></p></div><div class=\"flex items-center justify-between\"><div class=\"flex items-center\"><input id=\"remember-me\" name=\"remember-me\" type=\"checkbox\" x-model=\"form.rememberMe\" class=\"h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-600\"> <label for=\"remember-me\" class=\"ml-3 block text-sm leading-6 text-gray-700 dark:text-gray-300\">Remember me</label></div><div class=\"text-sm leading-6\"><a href=\"#\" class=\"font-semibold text-primary-600 hover:text-primary-500\">Forgot password?</a></div></div><div><button type=\"submit\" class=\"btn-primary w-full\" :disabled=\"loading\"><span x-show=\"!loading\">Sign in</span> <span x-show=\"loading\" class=\"flex items-center justify-center\"><svg class=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" fill=\"none\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99\"></path></svg> Signing in...</span></button></div><!-- Success/Error Messages --><div x-show=\"message.text\" class=\"rounded-md p-4\" :class=\"message.type === 'success' ? 'bg-green-50 border border-green-200 text-green-800' : 'bg-red-50 border border-red-200 text-red-800'\"><p class=\"text-sm\" x-text=\"message.text\"></p></div></form>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<!-- OAuth-only message -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if oauthConfig != nil && oauthConfig.DisableClassicAuth {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<div class=\"mt-6 text-center\"><p class=\"text-sm text-gray-600 dark:text-gray-400\">Username/password authentication is disabled. Please use one of the OAuth providers above.</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<script>\n\t\t\t\tfunction loginForm() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tform: {\n\t\t\t\t\t\t\tusername: '',\n\t\t\t\t\t\t\tpassword: '',\n\t\t\t\t\t\t\trememberMe: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrors: {},\n\t\t\t\t\t\tmessage: { text: '', type: '' },\n\t\t\t\t\t\tloading: false,\n\t\t\t\t\t\t\n\t\t\t\t\t\tasync submitForm() {\n\t\t\t\t\t\t\tthis.clearErrors();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!this.validateForm()) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.loading = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\t\t\t\tformData.append('username', this.form.username);\n\t\t\t\t\t\t\t\tformData.append('password', this.form.password);\n\t\t\t\t\t\t\t\tif (this.form.rememberMe) {\n\t\t\t\t\t\t\t\t\tformData.append('remember-me', 'on');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tconst response = await fetch('/api/v1/auth/login', {\n\t\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\t\tbody: formData\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (result.success) {\n\t\t\t\t\t\t\t\t\tthis.message = { text: result.data.message, type: 'success' };\n\t\t\t\t\t\t\t\t\t// Redirect to dashboard\n\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\twindow.location.href = result.data.redirect;\n\t\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.message = { text: result.error, type: 'error' };\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tthis.message = { text: 'Network error. Please try again.', type: 'error' };\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tthis.loading = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\n\t\t\t\t\t\tvalidateForm() {\n\t\t\t\t\t\t\tlet isValid = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!this.form.username.trim()) {\n\t\t\t\t\t\t\t\tthis.errors.username = 'Username is required';\n\t\t\t\t\t\t\t\tisValid = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!this.form.password) {\n\t\t\t\t\t\t\t\tthis.errors.password = 'Password is required';\n\t\t\t\t\t\t\t\tisValid = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn isValid;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\n\t\t\t\t\t\tclearErrors() {\n\t\t\t\t\t\t\tthis.errors = {};\n\t\t\t\t\t\t\tthis.message = { text: '', type: '' };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</script><!-- Register link (hidden if OAuth-only mode) -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if oauthConfig == nil || !oauthConfig.DisableClassicAuth {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<p class=\"mt-10 text-center text-sm text-gray-500 dark:text-gray-400\">Not registered? <a href=\"/register\" class=\"font-semibold leading-6 text-primary-600 hover:text-primary-500\">Create an account</a></p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<!-- Dark mode toggle --><div class=\"mt-8 flex justify-center\"><button @click=\"toggle()\" class=\"rounded-lg p-2 text-gray-500 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-dark-bg-secondary transition-colors\"><span x-show=\"!darkMode\">🌙 Dark Mode</span> <span x-show=\"darkMode\">☀️ Light Mode</span></button></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
