package pages

import (
	"notificator/internal/webui/templates/layouts"
	"notificator/internal/webui/templates/components"
	"notificator/internal/webui/templates/scripts"
)

templ AlertDetailsStandalone() {
	@layouts.Base("Alert Details - Notificator", AlertDetailsStandaloneContent())
}

templ AlertDetailsStandaloneContent() {
	<div class="min-h-screen bg-gray-50 dark:bg-dark-bg-primary" x-data="alertDetailsStandalone()" x-init="init()">
		<!-- Header -->
		<header class="bg-white dark:bg-dark-bg-secondary shadow-sm border-b border-gray-200 dark:border-dark-border-subtle">
			<div class="max-w-full mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Breadcrumb Navigation -->
				<div class="py-2 border-b border-gray-100 dark:border-gray-800">
					<nav class="flex items-center space-x-2 text-sm">
						<a @click="goBackToDashboard()" href="#" class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 transition-colors">
							Dashboard
						</a>
						<svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
						</svg>
						<span class="text-gray-500 dark:text-gray-400">Alert</span>
						<svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
						</svg>
						<span class="text-gray-900 dark:text-white font-medium truncate max-w-xs" 
							  x-text="alertDetails?.alert?.alertName || alertDetails?.alert?.labels?.alertname || 'Loading...'">
						</span>
					</nav>
				</div>
				
				<div class="flex items-center justify-between h-14">
					<!-- Back to Dashboard Button -->
					<div class="flex items-center space-x-4">
						<button @click="goBackToDashboard()" class="flex items-center space-x-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800">
							<svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
							</svg>
							<span class="text-sm font-medium">Back</span>
						</button>
					</div>

					<!-- Title -->
					<div class="flex-1 text-center">
						<h1 class="text-xl font-semibold text-gray-900 dark:text-white">Alert Details</h1>
					</div>

					<!-- View in Dashboard Modal -->
					<div class="flex items-center space-x-4">
						<a @click="viewInDashboard()" href="#"
						   class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/30 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors">
							<svg class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
							</svg>
							View in Dashboard
						</a>
					</div>
				</div>
			</div>
		</header>

		<!-- Alert Content Container -->
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<!-- Skeleton Loading State -->
			<div x-show="loading" class="bg-white dark:bg-dark-bg-secondary rounded-lg shadow-lg animate-pulse">
				<!-- Alert Header Skeleton -->
				<div class="relative bg-gradient-to-r from-gray-100 to-gray-50 dark:from-gray-800 dark:to-gray-900 px-6 py-6 border-b border-gray-200/50 dark:border-dark-border-subtle/50 rounded-t-lg">
					<div class="flex items-start space-x-4">
						<div class="w-12 h-12 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
						<div class="flex-1 space-y-3">
							<div class="h-7 bg-gray-300 dark:bg-gray-700 rounded w-1/3"></div>
							<div class="flex space-x-2">
								<div class="h-6 bg-gray-300 dark:bg-gray-700 rounded-full w-20"></div>
								<div class="h-6 bg-gray-300 dark:bg-gray-700 rounded-full w-20"></div>
								<div class="h-6 bg-gray-300 dark:bg-gray-700 rounded-full w-24"></div>
							</div>
							<div class="flex space-x-3">
								<div class="h-9 bg-gray-300 dark:bg-gray-700 rounded-lg w-28"></div>
								<div class="h-9 bg-gray-300 dark:bg-gray-700 rounded-lg w-24"></div>
								<div class="h-9 bg-gray-300 dark:bg-gray-700 rounded-lg w-32"></div>
							</div>
						</div>
					</div>
				</div>
				
				<!-- Tab Navigation Skeleton -->
				<div class="px-6 py-4 bg-gray-50/50 dark:bg-gray-800/50 border-b border-gray-200/50 dark:border-dark-border-subtle/50">
					<div class="flex space-x-4">
						<div class="h-10 bg-gray-300 dark:bg-gray-700 rounded-lg w-24"></div>
						<div class="h-10 bg-gray-200 dark:bg-gray-800 rounded-lg w-20"></div>
						<div class="h-10 bg-gray-200 dark:bg-gray-800 rounded-lg w-20"></div>
						<div class="h-10 bg-gray-200 dark:bg-gray-800 rounded-lg w-28"></div>
						<div class="h-10 bg-gray-200 dark:bg-gray-800 rounded-lg w-32"></div>
					</div>
				</div>
				
				<!-- Content Skeleton -->
				<div class="p-6">
					<!-- Quick Info Cards Skeleton -->
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
						<div class="bg-gradient-to-br from-white to-gray-50 dark:from-dark-bg-tertiary dark:to-gray-800 rounded-xl p-6 border border-gray-200/50 dark:border-dark-border-subtle/50">
							<div class="h-5 bg-gray-300 dark:bg-gray-700 rounded w-20 mb-4"></div>
							<div class="space-y-2">
								<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-full"></div>
								<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-3/4"></div>
							</div>
						</div>
						<div class="bg-gradient-to-br from-white to-gray-50 dark:from-dark-bg-tertiary dark:to-gray-800 rounded-xl p-6 border border-gray-200/50 dark:border-dark-border-subtle/50">
							<div class="h-5 bg-gray-300 dark:bg-gray-700 rounded w-24 mb-4"></div>
							<div class="space-y-2">
								<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-full"></div>
								<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-2/3"></div>
							</div>
						</div>
						<div class="bg-gradient-to-br from-white to-gray-50 dark:from-dark-bg-tertiary dark:to-gray-800 rounded-xl p-6 border border-gray-200/50 dark:border-dark-border-subtle/50">
							<div class="h-5 bg-gray-300 dark:bg-gray-700 rounded w-24 mb-4"></div>
							<div class="space-y-2">
								<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-full"></div>
								<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-1/2"></div>
							</div>
						</div>
					</div>
					
					<!-- Summary/Description Skeleton -->
					<div class="bg-white dark:bg-dark-bg-tertiary rounded-lg p-6 border border-gray-200 dark:border-dark-border-subtle">
						<div class="h-5 bg-gray-300 dark:bg-gray-700 rounded w-24 mb-4"></div>
						<div class="space-y-2">
							<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-full"></div>
							<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-full"></div>
							<div class="h-4 bg-gray-200 dark:bg-gray-800 rounded w-3/4"></div>
						</div>
					</div>
				</div>
			</div>

			<!-- Error State -->
			<div x-show="error && !loading" class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
				<div class="flex items-center">
					<svg class="h-5 w-5 text-red-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
					</svg>
					<h3 class="text-lg font-medium text-red-800 dark:text-red-200">Error Loading Alert</h3>
				</div>
				<p class="mt-2 text-sm text-red-700 dark:text-red-300" x-text="error"></p>
				<button @click="loadAlertDetails()" class="mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
					Retry
				</button>
			</div>

			<!-- Alert Details Content -->
			<div x-show="!loading && !error && alertDetails" class="bg-white dark:bg-dark-bg-secondary rounded-lg shadow-lg flex flex-col max-h-[calc(100vh-12rem)]">
				<!-- Sticky Alert Header -->
				<div class="sticky top-0 z-10 relative bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-900 px-6 py-6 border-b border-gray-200/50 dark:border-dark-border-subtle/50 rounded-t-lg">
					<div class="flex items-start space-x-4">
						<!-- Status Icon -->
						<div class="flex-shrink-0 mt-1">
							<div class="relative">
								<!-- Firing status -->
								<div x-show="alertDetails?.alert?.status?.state === 'firing'" 
									 class="w-12 h-12 bg-red-500 rounded-full flex items-center justify-center shadow-lg shadow-red-500/25">
									<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
									</svg>
								</div>
								<!-- Resolved status -->
								<div x-show="alertDetails?.alert?.status?.state === 'resolved'" 
									 class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center shadow-lg shadow-green-500/25">
									<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
									</svg>
								</div>
								<!-- Suppressed/Silenced status -->
								<div x-show="alertDetails?.alert?.status?.state === 'suppressed'" 
									 class="w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center shadow-lg shadow-purple-500/25">
									<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"/>
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"/>
									</svg>
								</div>
							</div>
						</div>

						<!-- Alert Info -->
						<div class="flex-1 min-w-0">
							<h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-2 break-words" 
								x-text="alertDetails?.alert?.alertName || 'Loading...'">
							</h1>
							
							<!-- Status and severity badges -->
							<div class="flex flex-wrap items-center gap-2 mb-3">
								<!-- Severity badge -->
								<span x-show="alertDetails?.alert?.severity" 
									  class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium shadow-sm"
									  :class="{
										  'bg-red-100 text-red-800 border border-red-200 dark:bg-red-900/50 dark:text-red-200 dark:border-red-800': (alertDetails?.alert?.severity === 'critical'),
										  'bg-yellow-100 text-yellow-800 border border-yellow-200 dark:bg-yellow-900/50 dark:text-yellow-200 dark:border-yellow-800': (alertDetails?.alert?.severity === 'warning'),
										  'bg-blue-100 text-blue-800 border border-blue-200 dark:bg-blue-900/50 dark:text-blue-200 dark:border-blue-800': (alertDetails?.alert?.severity === 'info')
									  }">
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
									</svg>
									<span x-text="alertDetails?.alert?.severity?.toUpperCase()"></span>
								</span>
								
								<!-- Status badge -->
								<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium shadow-sm"
									  :class="{
										  'bg-red-100 text-red-800 border border-red-200 dark:bg-red-900/50 dark:text-red-200 dark:border-red-800': alertDetails?.alert?.status?.state === 'firing',
										  'bg-green-100 text-green-800 border border-green-200 dark:bg-green-900/50 dark:text-green-200 dark:border-green-800': alertDetails?.alert?.status?.state === 'resolved',
										  'bg-purple-100 text-purple-800 border border-purple-200 dark:bg-purple-900/50 dark:text-purple-200 dark:border-purple-800': alertDetails?.alert?.status?.state === 'suppressed'
									  }">
									<span x-text="(alertDetails?.alert?.status?.state || 'unknown').toUpperCase()"></span>
								</span>
								
								<!-- Acknowledged badge -->
								<span x-show="alertDetails?.alert?.isAcknowledged" 
									  class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 border border-green-200 dark:bg-green-900/50 dark:text-green-200 dark:border-green-800 shadow-sm">
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
									</svg>
									ACKNOWLEDGED
								</span>
							</div>

							<!-- Action buttons -->
							<div class="flex flex-wrap items-center gap-3">
								<button @click="acknowledgeAlert()" 
										x-show="alertDetails?.alert && !alertDetails?.alert?.isAcknowledged"
										class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg shadow-lg transition-all duration-200">
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
									</svg>
									Acknowledge
								</button>
								
								<button @click="unacknowledgeAlert()" 
										x-show="alertDetails?.alert && alertDetails?.alert?.isAcknowledged"
										class="inline-flex items-center px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm font-medium rounded-lg shadow-lg transition-all duration-200">
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
									</svg>
									Unacknowledge
								</button>
								
								<button @click="silenceAlert()" 
										x-show="alertDetails?.alert && !isAlertSilenced(alertDetails?.alert)"
										class="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm font-medium rounded-lg shadow-lg transition-all duration-200">
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" d="M17.25 9.75 19.5 12m0 0 2.25 2.25M19.5 12l2.25-2.25M19.5 12l-2.25 2.25m-10.5-6 4.72-4.72a.75.75 0 0 1 1.28.53v15.88a.75.75 0 0 1-1.28.53l-4.72-4.72H4.51c-.88 0-1.59-.79-1.59-1.78V9.51c0-.88.79-1.59 1.78-1.59h1.78Z"/>
									</svg>
									Silence
								</button>
								
								<button @click="unsilenceAlert()" 
										x-show="alertDetails?.alert && isAlertSilenced(alertDetails?.alert)"
										class="inline-flex items-center px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm font-medium rounded-lg shadow-lg transition-all duration-200">
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" d="M19.114 5.636a9 9 0 0 1 0 12.728M16.463 8.288a5.25 5.25 0 0 1 0 7.424M6.75 8.25l4.72-4.72a.75.75 0 0 1 1.28.53v15.88a.75.75 0 0 1-1.28.53l-4.72-4.72H4.51c-.88 0-1.59-.79-1.59-1.78V9.51c0-.88.79-1.59 1.78-1.59h1.78Z"/>
									</svg>
									<span x-text="getSilenceButtonText(alertDetails?.alert)"></span>
								</button>
								
								<button @click="copyAlertAsIssue()" 
										x-show="alertDetails?.alert"
										class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg shadow-lg transition-all duration-200">
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2V8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
									</svg>
									Copy as Issue
								</button>
								
								<button @click="copyGeneratorURL()" 
										x-show="alertDetails?.alert && alertDetails?.alert?.generatorURL"
										class="inline-flex items-center px-4 py-2 bg-teal-600 hover:bg-teal-700 text-white text-sm font-medium rounded-lg shadow-lg transition-all duration-200">
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
									</svg>
									Generator URL
								</button>
								
								<button @click="copyAlertLink()" 
										x-show="alertDetails?.alert"
										class="inline-flex items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-lg shadow-lg transition-all duration-200">
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
									</svg>
									Copy Alert Link
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Sticky Tab Navigation -->
				<div class="sticky top-[10.5rem] z-10 px-6 py-4 bg-gray-50/50 dark:bg-gray-800/50 border-b border-gray-200/50 dark:border-dark-border-subtle/50">
					<nav class="flex space-x-1 overflow-x-auto">
						<button @click="currentTab = 'overview'" 
								:class="currentTab === 'overview' ? 'bg-white dark:bg-dark-bg-tertiary text-blue-600 dark:text-blue-400 shadow-sm border border-blue-200 dark:border-blue-800' : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-white/50 dark:hover:bg-dark-bg-tertiary/50'"
								class="whitespace-nowrap px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
							</svg>
							Overview
						</button>
						<button @click="currentTab = 'details'" 
								:class="currentTab === 'details' ? 'bg-white dark:bg-dark-bg-tertiary text-blue-600 dark:text-blue-400 shadow-sm border border-blue-200 dark:border-blue-800' : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-white/50 dark:hover:bg-dark-bg-tertiary/50'"
								class="whitespace-nowrap px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
							</svg>
							Details
						</button>
						<button @click="currentTab = 'labels'" 
								:class="currentTab === 'labels' ? 'bg-white dark:bg-dark-bg-tertiary text-blue-600 dark:text-blue-400 shadow-sm border border-blue-200 dark:border-blue-800' : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-white/50 dark:hover:bg-dark-bg-tertiary/50'"
								class="whitespace-nowrap px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
							</svg>
							Labels
						</button>
						<button @click="currentTab = 'annotations'" 
								:class="currentTab === 'annotations' ? 'bg-white dark:bg-dark-bg-tertiary text-blue-600 dark:text-blue-400 shadow-sm border border-blue-200 dark:border-blue-800' : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-white/50 dark:hover:bg-dark-bg-tertiary/50'"
								class="whitespace-nowrap px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
							</svg>
							Annotations
						</button>
						<button @click="currentTab = 'acknowledgments'" 
								:class="currentTab === 'acknowledgments' ? 'bg-white dark:bg-dark-bg-tertiary text-blue-600 dark:text-blue-400 shadow-sm border border-blue-200 dark:border-blue-800' : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-white/50 dark:hover:bg-dark-bg-tertiary/50'"
								class="whitespace-nowrap px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
							</svg>
							Acknowledgments
						</button>
						<button @click="currentTab = 'comments'" 
								:class="currentTab === 'comments' ? 'bg-white dark:bg-dark-bg-tertiary text-blue-600 dark:text-blue-400 shadow-sm border border-blue-200 dark:border-blue-800' : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-white/50 dark:hover:bg-dark-bg-tertiary/50'"
								class="whitespace-nowrap px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
							</svg>
							Comments
							<span x-show="alertDetails?.comments && alertDetails.comments.length > 0" 
								  class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
								  x-text="alertDetails?.comments?.length || 0">
							</span>
						</button>
						<button @click="currentTab = 'related'" 
								:class="currentTab === 'related' ? 'bg-white dark:bg-dark-bg-tertiary text-blue-600 dark:text-blue-400 shadow-sm border border-blue-200 dark:border-blue-800' : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-white/50 dark:hover:bg-dark-bg-tertiary/50'"
								class="whitespace-nowrap px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
							</svg>
							Related
							<span x-show="relatedAlerts && relatedAlerts.length > 0" 
								  class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200"
								  x-text="relatedAlerts?.length || 0">
							</span>
						</button>
					</nav>
				</div>

				<!-- Scrollable Tab Content -->
				<div class="flex-1 overflow-y-auto p-6">
					<!-- Overview Tab -->
					<div x-show="currentTab === 'overview'" class="space-y-6">
						<!-- Include all the overview content from modal -->
						@alertDetailsOverviewTab()
					</div>

					<!-- Details Tab -->
					<div x-show="currentTab === 'details'" class="space-y-4">
						@alertDetailsDetailsTab()
					</div>

					<!-- Labels Tab -->
					<div x-show="currentTab === 'labels'">
						@alertDetailsLabelsTab()
					</div>

					<!-- Annotations Tab -->
					<div x-show="currentTab === 'annotations'">
						@alertDetailsAnnotationsTab()
					</div>

					<!-- Acknowledgments Tab -->
					<div x-show="currentTab === 'acknowledgments'">
						@alertDetailsAcknowledgmentsTab()
					</div>

					<!-- Comments Tab -->
					<div x-show="currentTab === 'comments'">
						@alertDetailsCommentsTab()
					</div>
					
					<!-- Related Alerts Tab -->
					<div x-show="currentTab === 'related'">
						@alertDetailsRelatedTab()
					</div>
				</div>
			</div>
		</div>

		<!-- Include modals for acknowledge and silence actions -->
		@components.AcknowledgmentModal()
		@components.SilenceModal()
	</div>

	<!-- Notifications container -->
	<div id="notifications" class="fixed top-4 right-4 z-50 space-y-2"></div>

	<!-- Include common scripts -->
	@scripts.AlertActionsCommon()
	
	<!-- JavaScript for standalone alert details -->
	@alertDetailsStandaloneScript()
}

// Tab content components (temporary - will be moved to shared component later)
templ alertDetailsOverviewTab() {
	<!-- Quick Info Cards with Better Hierarchy -->
	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
		<!-- Status Card (Priority 1) -->
		<div class="bg-gradient-to-br from-white to-gray-50 dark:from-dark-bg-tertiary dark:to-gray-800 rounded-xl p-5 shadow-sm border border-gray-200/50 dark:border-dark-border-subtle/50">
			<div class="flex items-center mb-3">
				<svg class="w-5 h-5 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
				</svg>
				<h4 class="text-sm font-semibold text-gray-900 dark:text-white">Status</h4>
			</div>
			<div class="space-y-2">
				<div class="flex items-center justify-between">
					<span class="text-xs text-gray-500 dark:text-gray-400">State</span>
					<span class="text-sm font-bold capitalize" 
						  :class="{
							  'text-red-600 dark:text-red-400': alertDetails?.alert?.status?.state === 'firing',
							  'text-green-600 dark:text-green-400': alertDetails?.alert?.status?.state === 'resolved',
							  'text-purple-600 dark:text-purple-400': alertDetails?.alert?.status?.state === 'suppressed'
						  }"
						  x-text="alertDetails?.alert?.status?.state || 'Unknown'"></span>
				</div>
				<div x-show="alertDetails?.alert?.isAcknowledged" class="flex items-center justify-between">
					<span class="text-xs text-gray-500 dark:text-gray-400">Acknowledged</span>
					<svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
						<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
					</svg>
				</div>
			</div>
		</div>

		<!-- Severity Card (Priority 2) -->
		<div class="bg-gradient-to-br from-white to-gray-50 dark:from-dark-bg-tertiary dark:to-gray-800 rounded-xl p-5 shadow-sm border border-gray-200/50 dark:border-dark-border-subtle/50">
			<div class="flex items-center mb-3">
				<svg class="w-5 h-5 mr-2 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
				</svg>
				<h4 class="text-sm font-semibold text-gray-900 dark:text-white">Severity</h4>
			</div>
			<div class="text-center py-2">
				<span class="text-2xl font-bold uppercase" 
					  :class="{
						  'text-red-600 dark:text-red-400': alertDetails?.alert?.severity === 'critical',
						  'text-yellow-600 dark:text-yellow-400': alertDetails?.alert?.severity === 'warning',
						  'text-blue-600 dark:text-blue-400': alertDetails?.alert?.severity === 'info'
					  }"
					  x-text="alertDetails?.alert?.severity || 'Unknown'"></span>
			</div>
		</div>

		<!-- Duration Card (Priority 3) -->
		<div class="bg-gradient-to-br from-white to-gray-50 dark:from-dark-bg-tertiary dark:to-gray-800 rounded-xl p-5 shadow-sm border border-gray-200/50 dark:border-dark-border-subtle/50">
			<div class="flex items-center mb-3">
				<svg class="w-5 h-5 mr-2 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
				</svg>
				<h4 class="text-sm font-semibold text-gray-900 dark:text-white">Duration</h4>
			</div>
			<div class="text-center">
				<span class="text-2xl font-bold text-gray-900 dark:text-white" x-text="calculateDuration()"></span>
				<div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
					<span x-text="alertDetails?.alert?.startsAt ? new Date(alertDetails.alert.startsAt).toLocaleTimeString() : ''"></span>
				</div>
			</div>
		</div>

		<!-- Source Card (Priority 4) -->
		<div class="bg-gradient-to-br from-white to-gray-50 dark:from-dark-bg-tertiary dark:to-gray-800 rounded-xl p-5 shadow-sm border border-gray-200/50 dark:border-dark-border-subtle/50">
			<div class="flex items-center mb-3">
				<svg class="w-5 h-5 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"/>
				</svg>
				<h4 class="text-sm font-semibold text-gray-900 dark:text-white">Source</h4>
			</div>
			<div class="truncate">
				<span class="text-sm font-medium text-gray-700 dark:text-gray-300" x-text="alertDetails?.alert?.source || 'Unknown'"></span>
				<div x-show="alertDetails?.alert?.instance" class="text-xs text-gray-500 dark:text-gray-400 truncate mt-1">
					<span x-text="alertDetails?.alert?.instance"></span>
				</div>
			</div>
		</div>
	</div>

	<!-- Summary and Description -->
	<div x-show="alertDetails?.alert?.summary" class="bg-white dark:bg-dark-bg-tertiary rounded-lg p-6 border border-gray-200 dark:border-dark-border-subtle">
		<h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Summary</h4>
		<p class="text-sm text-gray-700 dark:text-gray-300" x-text="alertDetails?.alert?.summary"></p>
	</div>

	<div x-show="alertDetails?.alert?.description" class="bg-white dark:bg-dark-bg-tertiary rounded-lg p-6 border border-gray-200 dark:border-dark-border-subtle">
		<h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Description</h4>
		<p class="text-sm text-gray-700 dark:text-gray-300" x-text="alertDetails?.alert?.description"></p>
	</div>
}

templ alertDetailsDetailsTab() {
	<div>
		<label class="block text-sm font-medium text-gray-900 dark:text-white">Fingerprint</label>
		<div class="mt-1 flex items-center space-x-2">
			<code class="px-2 py-1 text-xs bg-gray-100 dark:bg-dark-bg-tertiary rounded font-mono" x-text="alertDetails?.alert?.fingerprint"></code>
			<button @click="copyToClipboard(alertDetails?.alert?.fingerprint)" class="text-gray-400 hover:text-gray-600">
				<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
				</svg>
			</button>
		</div>
	</div>

	<div x-show="alertDetails?.alert?.generatorURL">
		<label class="block text-sm font-medium text-gray-900 dark:text-white">Generator URL</label>
		<a :href="alertDetails?.alert?.generatorURL" target="_blank" class="text-blue-600 hover:text-blue-500 text-sm break-all" x-text="alertDetails?.alert?.generatorURL"></a>
	</div>
}

templ alertDetailsLabelsTab() {
	<div x-show="alertDetails?.alert?.labels && Object.keys(alertDetails.alert.labels).length > 0" class="space-y-2">
		<template x-for="[key, value] in Object.entries((alertDetails?.alert?.labels) || {})" :key="key">
			<div class="flex items-center justify-between py-2 px-3 bg-gray-50 dark:bg-dark-bg-tertiary rounded">
				<div class="flex items-center space-x-2">
					<code class="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded font-mono" x-text="key"></code>
					<span class="text-sm">=</span>
					<code class="text-xs bg-gray-100 dark:bg-dark-bg-secondary text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono" x-text="value"></code>
				</div>
				<button @click="copyToClipboard(key + '=' + value)" class="text-gray-400 hover:text-gray-600">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
					</svg>
				</button>
			</div>
		</template>
	</div>
	<div x-show="!alertDetails?.alert?.labels || Object.keys(alertDetails?.alert?.labels || {}).length === 0" class="text-center py-8 text-gray-500">
		No labels available
	</div>
}

templ alertDetailsAnnotationsTab() {
	<div x-show="alertDetails?.alert?.annotations && Object.keys(alertDetails.alert.annotations).length > 0" class="space-y-2">
		<template x-for="[key, value] in Object.entries((alertDetails?.alert?.annotations) || {})" :key="key">
			<div class="py-2 px-3 bg-gray-50 dark:bg-dark-bg-tertiary rounded">
				<div class="flex items-center justify-between mb-1">
					<code class="text-xs bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 px-2 py-1 rounded font-mono" x-text="key"></code>
					<button @click="copyToClipboard(value)" class="text-gray-400 hover:text-gray-600">
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
						</svg>
					</button>
				</div>
				<div class="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap" x-text="value"></div>
			</div>
		</template>
	</div>
	<div x-show="!alertDetails?.alert?.annotations || Object.keys(alertDetails?.alert?.annotations || {}).length === 0" class="text-center py-8 text-gray-500">
		No annotations available
	</div>
}

templ alertDetailsAcknowledgmentsTab() {
	<div x-show="alertDetails?.acknowledgments && alertDetails.acknowledgments.length > 0" class="space-y-3">
		<template x-for="ack in alertDetails?.acknowledgments || []" :key="ack.id">
			<div class="border border-gray-200 dark:border-dark-border-subtle rounded-lg p-4">
				<div class="flex items-center justify-between mb-2">
					<span class="font-medium" x-text="ack.author"></span>
					<span class="text-sm text-gray-500" x-text="new Date(ack.createdAt).toLocaleString()"></span>
				</div>
				<p class="text-sm text-gray-700 dark:text-gray-300" x-text="ack.comment"></p>
			</div>
		</template>
	</div>
	<div x-show="!alertDetails?.acknowledgments || alertDetails.acknowledgments.length === 0" class="text-center py-8 text-gray-500">
		No acknowledgments available
	</div>
}

templ alertDetailsCommentsTab() {
	<!-- Add new comment -->
	<div class="mb-6">
		<textarea 
			x-model="newCommentContent"
			@keydown.enter.cmd="addComment()"
			@keydown.enter.ctrl="addComment()"
			placeholder="Add a comment..." 
			class="w-full px-3 py-2 border border-gray-300 dark:border-dark-border-DEFAULT rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-dark-bg-tertiary dark:text-white"
			rows="3"></textarea>
		<button @click="addComment()" 
				:disabled="!newCommentContent.trim() || commentSubmitting"
				class="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed">
			<span x-show="!commentSubmitting">Add Comment</span>
			<span x-show="commentSubmitting">Adding...</span>
		</button>
	</div>

	<!-- Comments list -->
	<div x-show="alertDetails?.comments && alertDetails.comments.length > 0" class="space-y-3">
		<template x-for="comment in alertDetails?.comments || []" :key="comment.id">
			<div class="border border-gray-200 dark:border-dark-border-subtle rounded-lg p-4">
				<div class="flex items-center justify-between mb-2">
					<span class="font-medium" x-text="comment.author"></span>
					<div class="flex items-center space-x-2">
						<span class="text-sm text-gray-500" x-text="new Date(comment.createdAt).toLocaleString()"></span>
						<button @click="deleteComment(comment.id)" 
								x-show="comment.canDelete"
								:disabled="commentDeleting[comment.id]"
								class="text-red-500 hover:text-red-700">
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
							</svg>
						</button>
					</div>
				</div>
				<p class="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap" x-text="comment.content"></p>
			</div>
		</template>
	</div>
	<div x-show="!alertDetails?.comments || alertDetails.comments.length === 0" class="text-center py-8 text-gray-500">
		No comments yet. Be the first to comment!
	</div>

	<!-- Modals -->
	@components.SilenceModal()
}

templ alertDetailsRelatedTab() {
	<!-- Filter Controls -->
	<div class="mb-6 space-y-4">
		<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
			<div class="flex flex-wrap items-center gap-4">
				<div class="flex items-center space-x-2">
					<label class="text-sm font-medium text-gray-700 dark:text-gray-300">Filter:</label>
					<select x-model="relatedFilter" @change="loadRelatedAlerts()" 
							class="text-sm border border-gray-300 dark:border-dark-border-DEFAULT rounded-lg px-3 py-1 bg-white dark:bg-dark-bg-tertiary dark:text-white">
						<option value="all">All Related</option>
						<option value="same_source">Same Source</option>
						<option value="same_severity">Same Severity</option>
						<option value="same_labels">Same Labels</option>
					</select>
				</div>
				
				<div class="flex items-center space-x-2">
					<label class="text-sm font-medium text-gray-700 dark:text-gray-300">Per page:</label>
					<select x-model="relatedPageSize" @change="changeRelatedPageSize(relatedPageSize)" 
							class="text-sm border border-gray-300 dark:border-dark-border-DEFAULT rounded-lg px-3 py-1 bg-white dark:bg-dark-bg-tertiary dark:text-white">
						<option value="10">10</option>
						<option value="25">25</option>
						<option value="50">50</option>
					</select>
				</div>
			</div>
			
			<button @click="loadRelatedAlerts()" 
					class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 flex items-center">
				<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
				</svg>
				Refresh
			</button>
		</div>
		
		<div class="flex items-center space-x-2">
			<svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
			</svg>
			<input type="text" 
				   x-model="relatedSearchQuery" 
				   @input="searchRelatedAlerts()"
				   placeholder="Search in related alerts..." 
				   class="flex-1 text-sm border border-gray-300 dark:border-dark-border-DEFAULT rounded-lg px-3 py-2 bg-white dark:bg-dark-bg-tertiary dark:text-white placeholder-gray-500 dark:placeholder-gray-400">
		</div>
	</div>

	<!-- Loading State -->
	<div x-show="relatedLoading" class="text-center py-8">
		<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
		<p class="text-sm text-gray-600 dark:text-gray-400 mt-2">Loading related alerts...</p>
	</div>

	<!-- Related Alerts List -->
	<div x-show="!relatedLoading && relatedAlerts && relatedAlerts.length > 0" class="space-y-3">
		<template x-for="alert in relatedAlerts" :key="alert.fingerprint">
			<div class="border border-gray-200 dark:border-dark-border-subtle rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer"
				 @click="navigateToAlert(alert.fingerprint)">
				<div class="flex items-start justify-between">
					<div class="flex-1 min-w-0">
						<h4 class="text-sm font-medium text-gray-900 dark:text-white truncate" 
							x-text="alert.alertName || alert.labels?.alertname || 'Unknown Alert'"></h4>
						<div class="flex items-center space-x-3 mt-2">
							<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
								  :class="{
									  'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200': alert.severity === 'critical',
									  'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200': alert.severity === 'warning',
									  'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200': alert.severity === 'info'
								  }"
								  x-text="(alert.severity || 'unknown').toUpperCase()"></span>
							<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
								  :class="{
									  'bg-red-100 text-red-800': alert.status?.state === 'firing',
									  'bg-green-100 text-green-800': alert.status?.state === 'resolved',
									  'bg-purple-100 text-purple-800': alert.status?.state === 'suppressed'
								  }"
								  x-text="(alert.status?.state || 'unknown').toUpperCase()"></span>
							<span x-show="alert.isAcknowledged" 
								  class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200">
								ACKNOWLEDGED
							</span>
						</div>
						<p x-show="alert.summary" class="text-xs text-gray-600 dark:text-gray-400 mt-2 line-clamp-2" x-text="alert.summary"></p>
					</div>
					<div class="flex-shrink-0 ml-4">
						<svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
						</svg>
					</div>
				</div>
			</div>
		</template>
	</div>
	
	<!-- Pagination Controls -->
	<div x-show="!relatedLoading && relatedAlerts && relatedAlerts.length > 0 && relatedTotalPages > 1" 
		 class="mt-6 flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
		
		<!-- Results Info -->
		<div class="flex items-center space-x-4">
			<span class="text-sm text-gray-700 dark:text-gray-300">
				Showing 
				<span class="font-medium" x-text="((relatedCurrentPage - 1) * relatedPageSize + 1)"></span>
				to 
				<span class="font-medium" x-text="Math.min(relatedCurrentPage * relatedPageSize, relatedTotalResults)"></span>
				of 
				<span class="font-medium" x-text="relatedTotalResults"></span>
				results
			</span>
		</div>
		
		<!-- Pagination Navigation -->
		<div class="flex items-center space-x-2">
			<!-- First Page -->
			<button @click="goToRelatedPage(1)" 
					:disabled="relatedCurrentPage === 1"
					:class="relatedCurrentPage === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-50 dark:hover:bg-gray-700'"
					class="px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300">
				First
			</button>
			
			<!-- Previous Page -->
			<button @click="prevRelatedPage()" 
					:disabled="relatedCurrentPage === 1"
					:class="relatedCurrentPage === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-50 dark:hover:bg-gray-700'"
					class="px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300">
				<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
				</svg>
			</button>
			
			<!-- Page Numbers -->
			<template x-for="page in getRelatedPageNumbers()" :key="'page-' + page">
				<button @click="goToRelatedPage(page)"
						:class="page === relatedCurrentPage ? 
							'bg-blue-600 text-white border-blue-600' : 
							'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'"
						class="px-3 py-1 text-sm border rounded-md"
						x-text="page">
				</button>
			</template>
			
			<!-- Next Page -->
			<button @click="nextRelatedPage()" 
					:disabled="relatedCurrentPage === relatedTotalPages"
					:class="relatedCurrentPage === relatedTotalPages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-50 dark:hover:bg-gray-700'"
					class="px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300">
				<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
				</svg>
			</button>
			
			<!-- Last Page -->
			<button @click="goToRelatedPage(relatedTotalPages)" 
					:disabled="relatedCurrentPage === relatedTotalPages"
					:class="relatedCurrentPage === relatedTotalPages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-50 dark:hover:bg-gray-700'"
					class="px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300">
				Last
			</button>
		</div>
	</div>
	
	<!-- Empty State -->
	<div x-show="!relatedLoading && (!relatedAlerts || relatedAlerts.length === 0)" class="text-center py-12">
		<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
		</svg>
		<h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No related alerts found</h3>
		<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Try adjusting the filter criteria or check back later.</p>
	</div>
}


templ alertDetailsStandaloneScript() {
	<script>
		function alertDetailsStandalone() {
			return {
				alertId: null,
				alertDetails: null,
				loading: true,
				error: null,
				currentTab: 'overview',
				newCommentContent: '',
				commentSubmitting: false,
				commentDeleting: {},

				// Related alerts functionality - handled by alertActionsCommonMixin

				// Modal state variables needed for shared functions
				showSilenceModal: false,
				silenceAction: 'single',
				silenceReason: '',
				silenceError: '',
				silenceSubmitting: false,
				currentSilenceAlert: null,
				silenceDuration: '1h',
				silenceDurationType: 'preset',
				customSilenceDuration: '',
				customDurationError: '',

				// Properties that shared functions might reference (stub implementations)
				selectedAlerts: [],
				selectedGroups: [],

				// Auto-refresh functionality
				refreshInterval: null,
				refreshRate: 5000, // 5 seconds
				isVisible: true,

				init() {
					// Merge the common alert actions mixin
					Object.assign(this, window.alertActionsCommonMixin || {});
					// Extract alert ID from URL
					const pathParts = window.location.pathname.split('/');
					if (pathParts.length >= 3 && pathParts[1] === 'alert') {
						this.alertId = pathParts[2];
						this.loadAlertDetails();
						this.startAutoRefresh();
					} else {
						this.error = 'Invalid alert URL';
						this.loading = false;
					}
					
					// Set up visibility change handling
					document.addEventListener('visibilitychange', () => {
						this.isVisible = !document.hidden;
						if (this.isVisible) {
							this.startAutoRefresh();
						} else {
							this.stopAutoRefresh();
						}
					});
				},

				startAutoRefresh() {
					this.stopAutoRefresh(); // Clear any existing interval
					this.refreshInterval = setInterval(() => {
						if (this.isVisible && !this.loading) {
							this.refreshAlertDetails();
						}
					}, this.refreshRate);
				},

				stopAutoRefresh() {
					if (this.refreshInterval) {
						clearInterval(this.refreshInterval);
						this.refreshInterval = null;
					}
				},

				async refreshAlertDetails() {
					if (!this.alertId) return;
					
					try {
						const response = await fetch(`/api/v1/dashboard/alert/${this.alertId}`, {
							credentials: 'include'
						});
						const result = await response.json();
						
						if (result.success) {
							// Only update if data actually changed to avoid unnecessary DOM updates
							if (JSON.stringify(this.alertDetails) !== JSON.stringify(result.data)) {
								this.alertDetails = result.data;
								// Show subtle refresh indicator
								this.showRefreshIndicator();
								
								// Refresh related alerts if on related tab
								if (this.currentTab === 'related') {
									this.loadRelatedAlerts();
								}
							}
						}
					} catch (error) {
						console.warn('Auto-refresh failed:', error);
						// Don't show error notifications for auto-refresh failures
					}
				},

				showRefreshIndicator() {
					// Find the alert header and add a subtle refresh indication
					const header = document.querySelector('.bg-gradient-to-r.from-blue-50');
					if (header) {
						header.classList.add('transition-colors', 'duration-300');
						header.classList.remove('from-blue-50', 'to-indigo-50');
						header.classList.add('from-green-50', 'to-emerald-50');
						
						setTimeout(() => {
							header.classList.remove('from-green-50', 'to-emerald-50');
							header.classList.add('from-blue-50', 'to-indigo-50');
						}, 1000);
					}
				},

				// calculateDuration moved to alertActionsCommonMixin

				isAlertSilenced(alert) {
					return alert?.status?.state === 'suppressed' || alert?.status?.state === 'silenced';
				},

				acknowledgeAlert() {
					if (this.alertDetails?.alert) {
						this.currentAckAlert = this.alertDetails.alert;
						this.ackAction = 'single';
						this.ackReason = '';
						this.ackError = '';
						this.showAckModal = true;
					} else {
						this.showNotification('error', 'No alert information available');
					}
				},

				async unacknowledgeAlert() {
					if (!this.alertDetails?.alert?.fingerprint) {
						this.showNotification('error', 'No alert information available');
						return;
					}
					
					// Use the common function from the mixin
					await this.processUnacknowledgeAction(this.alertDetails.alert.fingerprint);
				},

				silenceAlert() {
					if (!this.alertDetails?.alert) {
						this.showNotification('error', 'No alert information available');
						return;
					}
					
					// Use modal approach like dashboard
					this.currentSilenceAlert = this.alertDetails.alert;
					this.silenceAction = 'single';
					this.silenceReason = '';
					this.silenceError = '';
					this.silenceDuration = '1h';
					this.silenceDurationType = 'preset';
					this.customSilenceDuration = '';
					this.customDurationError = '';
					this.showSilenceModal = true;
				},

				async unsilenceAlert() {
					if (!this.alertDetails?.alert?.fingerprint) {
						this.showNotification('error', 'No alert information available');
						return;
					}
					
					// Use common function from shared mixin
					await this.processUnsilenceAction(this.alertDetails.alert.fingerprint);
				},

				async copyAlertAsIssue() {
					if (!this.alertDetails?.alert) {
						this.showNotification('error', 'No alert data available');
						return;
					}

					const alert = this.alertDetails.alert;
					const comments = this.alertDetails.comments || [];
					
					const formatDate = (dateStr) => {
						if (!dateStr) return 'N/A';
						return new Date(dateStr).toLocaleString();
					};
					
					const calculateDuration = (start, end) => {
						if (!start) return 'N/A';
						const startTime = new Date(start);
						const endTime = end ? new Date(end) : new Date();
						const diffMs = endTime - startTime;
						
						const hours = Math.floor(diffMs / (1000 * 60 * 60));
						const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
						
						if (hours > 0) {
							return `${hours}h ${minutes}m`;
						}
						return `${minutes}m`;
					};

					// Build markdown content
					let markdown = `# Alert: ${alert.alertname || alert.labels?.alertname || alert.alertName || 'Unknown'}\n\n`;
					
					// Summary section
					if (alert.summary) {
						markdown += `## Summary\n${alert.summary}\n\n`;
					}

					// Details section
					markdown += `## Details\n`;
					markdown += `- **Status**: ${(alert.status?.state || 'unknown').toUpperCase()}\n`;
					markdown += `- **Severity**: ${(alert.severity || 'unknown').toUpperCase()}\n`;
					if (alert.instance) {
						markdown += `- **Instance**: ${alert.instance}\n`;
					}
					markdown += `- **Started**: ${formatDate(alert.startsAt)}\n`;
					if (alert.endsAt) {
						markdown += `- **Ended**: ${formatDate(alert.endsAt)}\n`;
					}
					markdown += `- **Duration**: ${calculateDuration(alert.startsAt, alert.endsAt)}\n\n`;

					// Labels section
					if (alert.labels && Object.keys(alert.labels).length > 0) {
						markdown += `## Labels\n`;
						Object.entries(alert.labels).forEach(([key, value]) => {
							markdown += `- **${key}**: ${value}\n`;
						});
						markdown += '\n';
					}

					// Annotations section
					if (alert.annotations && Object.keys(alert.annotations).length > 0) {
						markdown += `## Annotations\n`;
						Object.entries(alert.annotations).forEach(([key, value]) => {
							markdown += `- **${key}**: ${value}\n`;
						});
						markdown += '\n';
					}

					// Comments section
					if (comments.length > 0) {
						markdown += `## Comments\n`;
						comments.forEach(comment => {
							const commentDate = formatDate(comment.createdAt);
							markdown += `**${comment.username || comment.author}** (${commentDate}):\n`;
							markdown += `${comment.content}\n\n`;
						});
					}

					// Alert ID section
					markdown += `## Alert ID\n`;
					markdown += `\`${alert.fingerprint}\`\n`;

					// Copy to clipboard
					await this.copyToClipboard(markdown);
					this.showNotification('success', 'Alert copied as issue template');
				},

				async copyToClipboard(text) {
					if (navigator.clipboard) {
						try {
							await navigator.clipboard.writeText(text);
							this.showNotification('success', 'Copied to clipboard');
						} catch (err) {
							this.showNotification('error', 'Failed to copy to clipboard');
						}
					} else {
						// Fallback for older browsers
						const textArea = document.createElement('textarea');
						textArea.value = text;
						document.body.appendChild(textArea);
						textArea.select();
						try {
							document.execCommand('copy');
							this.showNotification('success', 'Copied to clipboard');
						} catch (err) {
							this.showNotification('error', 'Failed to copy to clipboard');
						}
						document.body.removeChild(textArea);
					}
				},

				showNotification(type, message) {
					const notification = document.createElement('div');
					notification.className = `mb-2 p-4 rounded-lg shadow-lg transition-all duration-300 ${
						type === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-200' :
						type === 'error' ? 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-200' :
						'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200'
					}`;
					notification.innerHTML = `
						<div class="flex items-center justify-between">
							<span>${message}</span>
							<button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-sm opacity-70 hover:opacity-100">&times;</button>
						</div>
					`;

					document.getElementById('notifications').appendChild(notification);

					// Auto-remove after 5 seconds
					setTimeout(() => {
						if (notification.parentElement) {
							notification.remove();
						}
					}, 5000);
				},

				async addComment() {
					if (!this.newCommentContent.trim()) {
						this.showNotification('warning', 'Please enter a comment');
						return;
					}

					if (!this.alertDetails?.alert?.fingerprint) {
						this.showNotification('error', 'Alert information not available');
						return;
					}

					this.commentSubmitting = true;
					
					try {
						const response = await fetch(`/api/v1/dashboard/alert/${this.alertDetails.alert.fingerprint}/comments`, {
							method: 'POST',
							credentials: 'include',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({
								content: this.newCommentContent.trim()
							})
						});

						const result = await response.json();
						
						if (result.success) {
							this.showNotification('success', 'Comment added successfully');
							this.newCommentContent = '';
							// Refresh alert details to get new comment
							await this.loadAlertDetails();
						} else {
							this.showNotification('error', 'Failed to add comment: ' + result.error);
						}
					} catch (error) {
						console.error('Error adding comment:', error);
						this.showNotification('error', 'Failed to add comment');
					} finally {
						this.commentSubmitting = false;
					}
				},

				async deleteComment(commentId) {
					if (!commentId || !this.alertDetails?.alert?.fingerprint) {
						this.showNotification('error', 'Comment information not available');
						return;
					}

					this.commentDeleting[commentId] = true;
					
					try {
						const response = await fetch(`/api/v1/dashboard/alert/${this.alertDetails.alert.fingerprint}/comments/${commentId}`, {
							method: 'DELETE',
							credentials: 'include'
						});

						const result = await response.json();
						
						if (result.success) {
							this.showNotification('success', 'Comment deleted successfully');
							// Refresh alert details
							await this.loadAlertDetails();
						} else {
							this.showNotification('error', 'Failed to delete comment: ' + result.error);
						}
					} catch (error) {
						console.error('Error deleting comment:', error);
						this.showNotification('error', 'Failed to delete comment');
					} finally {
						delete this.commentDeleting[commentId];
					}
				},

				// Method that shared functions can call to refresh data
				async loadDashboardData() {
					// In standalone mode, we refresh the alert details instead of full dashboard
					return this.loadAlertDetails();
				},

				// Stub method that shared functions might call
				clearSelection() {
					// No-op in standalone mode since we don't have selections
					this.selectedAlerts = [];
					this.selectedGroups = [];
				},

				// Navigation functions
				goBackToDashboard() {
					// Try to preserve filters from referrer or use default dashboard
					let dashboardUrl = '/dashboard';
					
					// Check if we came from dashboard with query params
					if (document.referrer && document.referrer.includes('/dashboard')) {
						const referrerUrl = new URL(document.referrer);
						const queryParams = referrerUrl.search;
						if (queryParams) {
							dashboardUrl = `/dashboard${queryParams}`;
						}
					}
					
					window.location.href = dashboardUrl;
				},

				viewInDashboard() {
					if (!this.alertId) {
						this.showNotification('error', 'Alert ID not available');
						return;
					}
					
					// Navigate to dashboard with modal open for this alert
					let dashboardUrl = `/dashboard/alert/${this.alertId}`;
					
					// Try to preserve filters from referrer
					if (document.referrer && document.referrer.includes('/dashboard')) {
						const referrerUrl = new URL(document.referrer);
						const queryParams = referrerUrl.search;
						if (queryParams) {
							dashboardUrl = `/dashboard/alert/${this.alertId}${queryParams}`;
						}
					}
					
					window.location.href = dashboardUrl;
				}
			}
		}
	</script>
}