package pages

import (
	"notificator/internal/webui/templates/layouts"
	"notificator/internal/webui/templates"
	"time"
)

type ProfileData struct {
	User         ProfileUser
	SessionInfo  SessionInfo
	Stats        UserStats
}

type ProfileUser struct {
	ID            string
	Username      string
	Email         string
	OAuthProvider *string
	OAuthID       *string
	CreatedAt     time.Time
	LastLogin     *time.Time
	EmailVerified bool
}

type SessionInfo struct {
	SessionID  string
	CreatedAt  time.Time
	ExpiresAt  time.Time
}

type UserStats struct {
	TotalAlerts      int
	ActiveAlerts     int
	ResolvedAlerts   int
	LastActivity     *time.Time
}

templ Profile(data ProfileData) {
	@layouts.Base("Profile - Notificator", ProfileContent(data))
}

templ ProfileContent(data ProfileData) {
	<div class="min-h-screen bg-gray-50 dark:bg-dark-bg-primary py-8" x-data="profilePage()">
		<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
			<!-- Header -->
			<div class="mb-8">
				<nav class="flex" aria-label="Breadcrumb">
					<ol class="flex items-center space-x-4">
						<li>
							<a href="/dashboard" class="text-gray-400 hover:text-gray-500 dark:text-gray-500 dark:hover:text-gray-400">
								<svg class="flex-shrink-0 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
									<path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
								</svg>
								<span class="sr-only">Dashboard</span>
							</a>
						</li>
						<li>
							<div class="flex items-center">
								<svg class="flex-shrink-0 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
									<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
								</svg>
								<span class="ml-4 text-sm font-medium text-gray-500 dark:text-gray-400">Profile</span>
							</div>
						</li>
					</ol>
				</nav>
				<h1 class="mt-4 text-3xl font-bold text-gray-900 dark:text-white">My Profile</h1>
			</div>

			<!-- Profile Cards Grid -->
			<div class="grid grid-cols-1 gap-6 lg:grid-cols-3">
				<!-- User Info Card (spans 2 columns on lg) -->
				<div class="lg:col-span-2">
					<div class="bg-white dark:bg-dark-bg-secondary rounded-lg shadow-sm border border-gray-200 dark:border-dark-border-subtle overflow-hidden">
						<div class="px-6 py-5">
							<div class="flex items-start space-x-5">
								<!-- Avatar -->
								<div class="flex-shrink-0">
									<div class="h-20 w-20 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
										<span class="text-2xl font-bold text-white">{ templates.GetInitials(data.User.Username) }</span>
									</div>
								</div>
								
								<!-- User Details -->
								<div class="flex-1 min-w-0">
									<h2 class="text-2xl font-bold text-gray-900 dark:text-white truncate">
										{ data.User.Username }
									</h2>
									<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
										{ data.User.Email }
									</p>
									
									<!-- Auth Method Badge -->
									<div class="mt-3 flex items-center space-x-2">
										if data.User.OAuthProvider != nil {
											<div class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400">
												@OAuthProviderBadge(*data.User.OAuthProvider)
											</div>
										} else {
											<div class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300">
												<svg class="mr-1.5 h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
												</svg>
												Classic Auth
											</div>
										}
										
										if data.User.EmailVerified {
											<div class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400">
												<svg class="mr-1.5 h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
												</svg>
												Verified
											</div>
										}
									</div>
								</div>

								<!-- Copy ID Button -->
								<div class="flex-shrink-0">
									<button 
										@click="copyUserId()" 
										class="inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-dark-bg-tertiary hover:bg-gray-50 dark:hover:bg-dark-bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
										title="Copy User ID"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
										</svg>
										<span class="ml-2">ID</span>
									</button>
								</div>
							</div>

							<!-- Account Details Grid -->
							<div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
								<div class="overflow-hidden">
									<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">User ID</dt>
									<dd class="mt-1 text-sm text-gray-900 dark:text-white font-mono truncate" title={ data.User.ID }>{ data.User.ID }</dd>
								</div>
								<div>
									<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Member Since</dt>
									<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ templates.FormatDate(data.User.CreatedAt) }</dd>
								</div>
								if data.User.LastLogin != nil {
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Last Login</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ templates.FormatDate(*data.User.LastLogin) }</dd>
									</div>
								}
								if data.User.OAuthID != nil {
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">OAuth ID</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white font-mono">{ *data.User.OAuthID }</dd>
									</div>
								}
							</div>
						</div>
					</div>
				</div>

				<!-- Session Info Card -->
				<div class="lg:col-span-1">
					<div class="bg-white dark:bg-dark-bg-secondary rounded-lg shadow-sm border border-gray-200 dark:border-dark-border-subtle overflow-hidden">
						<div class="px-6 py-5">
							<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
								Current Session
							</h3>
							
							<div class="space-y-3">
								<div>
									<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Session ID</dt>
									<dd class="mt-1 text-xs text-gray-900 dark:text-white font-mono truncate">{ data.SessionInfo.SessionID }</dd>
								</div>
								<div>
									<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Session Started</dt>
									<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ templates.FormatDate(data.SessionInfo.CreatedAt) }</dd>
								</div>
								<div>
									<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Expires</dt>
									<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ templates.FormatDate(data.SessionInfo.ExpiresAt) }</dd>
								</div>
								
								<!-- Session Duration -->
								<div class="pt-3 border-t border-gray-200 dark:border-gray-700">
									<div class="flex items-center justify-between">
										<span class="text-sm text-gray-500 dark:text-gray-400">Duration</span>
										<span class="text-sm font-medium text-gray-900 dark:text-white">
											{ templates.FormatDuration(time.Since(data.SessionInfo.CreatedAt)) }
										</span>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

				<!-- Quick Actions -->
				<div class="lg:col-span-3">
					<div class="bg-white dark:bg-dark-bg-secondary rounded-lg shadow-sm border border-gray-200 dark:border-dark-border-subtle p-6">
						<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Quick Actions</h3>
						<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
							<a href="/dashboard" class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-dark-bg-tertiary hover:bg-gray-50 dark:hover:bg-dark-bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
								<svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
								</svg>
								Back to Dashboard
							</a>
							
							if data.User.OAuthProvider == nil {
								<button @click="showChangePassword" class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-dark-bg-tertiary hover:bg-gray-50 dark:hover:bg-dark-bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
									<svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
									</svg>
									Change Password
								</button>
							}
							
							<button 
								hx-post="/api/v1/auth/logout"
								hx-trigger="click"
								hx-on::after-request="handleLogoutResponse(event)"
								class="inline-flex items-center justify-center px-4 py-2 border border-red-300 dark:border-red-800 shadow-sm text-sm font-medium rounded-md text-red-700 dark:text-red-400 bg-white dark:bg-dark-bg-tertiary hover:bg-red-50 dark:hover:bg-red-900/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
							>
								<svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
								</svg>
								Sign Out
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Toast Notification -->
		<div x-show="showToast" 
			 x-transition:enter="transform ease-out duration-300 transition"
			 x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
			 x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
			 x-transition:leave="transition ease-in duration-100"
			 x-transition:leave-start="opacity-100"
			 x-transition:leave-end="opacity-0"
			 class="fixed bottom-4 right-4 max-w-sm bg-white dark:bg-dark-bg-secondary shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden">
			<div class="p-4">
				<div class="flex items-center">
					<div class="flex-shrink-0">
						<svg class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
						</svg>
					</div>
					<div class="ml-3 w-0 flex-1">
						<p class="text-sm font-medium text-gray-900 dark:text-white">
							Copied to clipboard!
						</p>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		function profilePage() {
			return {
				showToast: false,
				userId: '{ data.User.ID }',
				
				copyUserId() {
					navigator.clipboard.writeText(this.userId).then(() => {
						this.showToast = true;
						setTimeout(() => {
							this.showToast = false;
						}, 2000);
					}).catch(err => {
						console.error('Failed to copy:', err);
						// Fallback for older browsers
						const input = document.createElement('input');
						input.value = this.userId;
						document.body.appendChild(input);
						input.select();
						document.execCommand('copy');
						document.body.removeChild(input);
						this.showToast = true;
						setTimeout(() => {
							this.showToast = false;
						}, 2000);
					});
				},
				
				showChangePassword() {
					// TODO: Implement change password modal
					alert('Change password functionality coming soon!');
				}
			}
		}
		
		function handleLogoutResponse(event) {
			if (event.detail.successful) {
				window.location.href = '/';
			}
		}
	</script>
}

templ OAuthProviderBadge(provider string) {
	<div class="flex items-center">
		switch provider {
			case "github":
				<svg class="mr-1.5 h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"></path>
				</svg>
				<span>GitHub</span>
			case "google":
				<svg class="mr-1.5 h-3 w-3" viewBox="0 0 24 24">
					<path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
					<path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
					<path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
					<path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
				</svg>
				<span>Google</span>
			case "microsoft":
				<svg class="mr-1.5 h-3 w-3" viewBox="0 0 24 24">
					<path fill="#f25022" d="M1 1h10v10H1z"/>
					<path fill="#00a4ef" d="M13 1h10v10H13z"/>
					<path fill="#7fba00" d="M1 13h10v10H1z"/>
					<path fill="#ffb900" d="M13 13h10v10H13z"/>
				</svg>
				<span>Microsoft</span>
			default:
				<span>{ provider }</span>
		}
	</div>
}

